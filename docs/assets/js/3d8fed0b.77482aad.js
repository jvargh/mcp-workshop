"use strict";(self.webpackChunkmcp_workshop=self.webpackChunkmcp_workshop||[]).push([[8273],{1667:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/vscode-tool-result-042a280dd25c06b76777cb2b0621391b.png"},1809:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/vscode-tool-447cca07679cf7338fbce5d15c99514b.png"},2066:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"mcp-concepts/consuming-server/activity-vscode","title":"Activity: Consume server with Visual Studio Code","description":"For this exercise, keep using the hello-mcp server that you created in the previous exercise or clone an existing repo here:","source":"@site/docs/mcp-concepts/01-consuming-server/02-activity-vscode.md","sourceDirName":"mcp-concepts/01-consuming-server","slug":"/mcp-concepts/consuming-server/activity-vscode","permalink":"/mcp-workshop/docs/mcp-concepts/consuming-server/activity-vscode","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/mcp-concepts/01-consuming-server/02-activity-vscode.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Consuming a server with Visual Studio Code","permalink":"/mcp-workshop/docs/mcp-concepts/consuming-server/vscode"},"next":{"title":"Consuming a server with an MCP client","permalink":"/mcp-workshop/docs/mcp-concepts/consuming-server/client"}}');var s=n(4848),o=n(8453),i=n(5537),l=n(9329);const a={sidebar_position:2},c="Activity: Consume server with Visual Studio Code",d={},u=[{value:"Create a config file",id:"create-a-config-file",level:2},{value:"Start the server",id:"start-the-server",level:2},{value:"Run the tool via GitHub Copilot chat",id:"run-the-tool-via-github-copilot-chat",level:2},{value:"Run the tool",id:"run-the-tool",level:2},{value:"Summary",id:"summary",level:2}];function h(e){const t={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"activity-consume-server-with-visual-studio-code",children:"Activity: Consume server with Visual Studio Code"})}),"\n",(0,s.jsxs)(t.admonition,{type:"info",children:[(0,s.jsxs)(t.p,{children:["For this exercise, keep using the ",(0,s.jsx)(t.code,{children:"hello-mcp"})," server that you created in the previous exercise or clone an existing repo here:"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git clone https://github.com/softchris/mcp-workshop.git\ncd mcp-workshop\n"})})]}),"\n",(0,s.jsx)(t.p,{children:"For a server built with stdio you need to do the following at high level:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Create an mcp.json file in ",(0,s.jsx)(t.code,{children:".vscode"})," folder"]}),"\n",(0,s.jsx)(t.li,{children:"Enter absolute path to the server"}),"\n",(0,s.jsx)(t.li,{children:"Start the server via the JSON file"}),"\n",(0,s.jsx)(t.li,{children:"Run the tool via GitHub Copilot chat"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"To do this, follow the steps below:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Create a ",(0,s.jsx)(t.code,{children:".vscode"})," folder in the root directory of your project and add a ",(0,s.jsx)(t.code,{children:"mcp.json"})," file in the ",(0,s.jsx)(t.code,{children:".vscode"})," folder."]}),"\n",(0,s.jsx)(t.li,{children:"Start the server via the JSON file."}),"\n",(0,s.jsx)(t.li,{children:"Run the tool via GitHub Copilot chat."}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"create-a-config-file",children:"Create a config file"}),"\n",(0,s.jsx)(t.p,{children:"The config file is used to configure the server. It can contain both input, and server configurations."}),"\n",(0,s.jsx)(t.p,{children:"We need a folder for our configuration file."}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(l.A,{value:"typescript",label:"TypeScript",children:(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Create a ",(0,s.jsx)(t.code,{children:".vscode"})," folder in the root directory of your project and add a ",(0,s.jsx)(t.code,{children:"mcp.json"})," file in the ",(0,s.jsx)(t.code,{children:".vscode"})," folder."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"mkdir .vscode\n"})}),"\n",(0,s.jsx)(t.p,{children:"Next, we need the actual configuration file."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Create a ",(0,s.jsx)(t.code,{children:"mcp.json"})," file in the ",(0,s.jsx)(t.code,{children:".vscode"})," folder with the following content:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n    "inputs": [],\n    "servers": {\n       "hello-mcp": {\n           "command": "cmd",\n           "args": [\n               "/c", "node", "<absolute path>\\\\build\\\\index.js"\n           ]\n       }\n    }\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"The path to your server should be the build folder. To find the path, run the following command in the terminal:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"pwd\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This will give you the absolute path to your project. You can then copy the path and paste it in the ",(0,s.jsx)(t.code,{children:"mcp.json"})," file."]}),"\n"]}),"\n"]})}),(0,s.jsx)(l.A,{value:"python",label:"Python",default:!0,children:(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Create a ",(0,s.jsx)(t.code,{children:".vscode"})," folder in the root directory of your project and add a ",(0,s.jsx)(t.code,{children:"mcp.json"})," file in the ",(0,s.jsx)(t.code,{children:".vscode"})," folder."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"mkdir .vscode\n"})}),"\n",(0,s.jsx)(t.p,{children:"Next, we need the actual configuration file."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Create a ",(0,s.jsx)(t.code,{children:"mcp.json"})," file in the ",(0,s.jsx)(t.code,{children:".vscode"})," folder with the following content:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n    "inputs": [],\n    "servers": {\n       "hello-mcp": {\n           "command": "cmd",\n           "args": [\n               "/c", "node", "<absolute path>\\\\server.py"\n           ]\n       }\n    }\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"The path to your server should be the build folder. To find the path, run the following command in the terminal:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"pwd\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This will give you the absolute path to your project. You can then copy the path and paste it in the ",(0,s.jsx)(t.code,{children:"mcp.json"})," file."]}),"\n"]}),"\n"]})})]}),"\n",(0,s.jsx)(t.h2,{id:"start-the-server",children:"Start the server"}),"\n",(0,s.jsxs)(t.p,{children:["To start the server, open the ",(0,s.jsx)(t.em,{children:"mcp.json"})," file in Visual Studio Code and click on the play button."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Start server",src:n(3295).A+"",width:"588",height:"283"})}),"\n",(0,s.jsx)(t.h2,{id:"run-the-tool-via-github-copilot-chat",children:"Run the tool via GitHub Copilot chat"}),"\n",(0,s.jsx)(t.p,{children:"Now that the server have hopefully started up, let's use it."}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Click tools icon to bring up a list of tools"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"VS Code available tools",src:n(1809).A+"",width:"712",height:"298"})}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Inspect the tools result list, your server should be listed there."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"VS Code inspect tools",src:n(9728).A+"",width:"1415",height:"104"})}),"\n",(0,s.jsx)(t.h2,{id:"run-the-tool",children:"Run the tool"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"To run the tool, type a prompt in the chat like so:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-text",children:"add 22 to 1\n"})}),"\n",(0,s.jsx)(t.p,{children:"You should see a result like so indicating that you allow the agent to run the tool:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"VS Code run tool",src:n(9212).A+"",width:"735",height:"1809"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Click the down arrow to expand the tool and see the arguments that are passed to the tool."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"VS Code run tool",src:n(2747).A+"",width:"714",height:"919"})}),"\n",(0,s.jsx)(t.p,{children:"Here you can see what server the selected tool is running on and the arguments that are passed to the tool."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:'Click on the "Continue" button to run the tool.'}),"\n",(0,s.jsx)(t.p,{children:"You should see a result like so:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"VS Code run tool result",src:n(1667).A+"",width:"729",height:"339"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(t.p,{children:"Congrats, you've managed to consume a server with Visual Studio Code and run a tool via GitHub Copilot chat!"})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},2747:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/vscode-tool-args-c61903aac90988f9439249634d93febd.png"},3295:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/vscode-start-server-671fc8a986faf8845f5fd2c9c5f7341a.png"},5537:(e,t,n)=>{n.d(t,{A:()=>w});var r=n(6540),s=n(4164),o=n(5627),i=n(6347),l=n(372),a=n(604),c=n(1861),d=n(8749);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:s}}=e;return{value:t,label:n,attributes:r,default:s}}))}(n);return function(e){const t=(0,c.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const s=(0,i.W6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,a.aZ)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(s.location.search);t.set(o,e),s.replace({...s.location,search:t.toString()})}),[o,s])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:s}=e,o=h(e),[i,a]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[c,u]=m({queryString:n,groupId:s}),[f,v]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[s,o]=(0,d.Dv)(n);return[s,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:s}),x=(()=>{const e=c??f;return p({value:e,tabValues:o})?e:null})();(0,l.A)((()=>{x&&a(x)}),[x]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);a(e),u(e),v(e)}),[u,v,o]),tabValues:o}}var v=n(9136);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=n(4848);function g(e){let{className:t,block:n,selectedValue:r,selectValue:i,tabValues:l}=e;const a=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),d=e=>{const t=e.currentTarget,n=a.indexOf(t),s=l[n].value;s!==r&&(c(t),i(s))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=a.indexOf(e.currentTarget)+1;t=a[n]??a[0];break}case"ArrowLeft":{const n=a.indexOf(e.currentTarget)-1;t=a[n]??a[a.length-1];break}}t?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},t),children:l.map((e=>{let{value:t,label:n,attributes:o}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>{a.push(e)},onKeyDown:u,onClick:d,...o,className:(0,s.A)("tabs__item",x.tabItem,o?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function b(e){let{lazy:t,children:n,selectedValue:o}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===o));return e?(0,r.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==o})))})}function y(e){const t=f(e);return(0,j.jsxs)("div",{className:(0,s.A)("tabs-container",x.tabList),children:[(0,j.jsx)(g,{...t,...e}),(0,j.jsx)(b,{...t,...e})]})}function w(e){const t=(0,v.A)();return(0,j.jsx)(y,{...e,children:u(e.children)},String(t))}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var r=n(6540);const s={},o=r.createContext(s);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:t},e.children)}},9212:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/vscode-agent-5c01c07d0be00b7eb33a056af8b3ffae.png"},9329:(e,t,n)=>{n.d(t,{A:()=>i});n(6540);var r=n(4164);const s={tabItem:"tabItem_Ymn6"};var o=n(4848);function i(e){let{children:t,hidden:n,className:i}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,i),hidden:n,children:t})}},9728:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/vscode-tool-info-5cfa477c24ae4271fdceda830da47564.png"}}]);