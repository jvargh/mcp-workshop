"use strict";(self.webpackChunkmcp_workshop=self.webpackChunkmcp_workshop||[]).push([[9582],{2250:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>m,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"mcp-concepts/consuming-server/client","title":"Consuming a server with an MCP client","description":"Another way to connect and consume an MCP server is by using a client. This is similar to how you would connect to a server using a web browser or a command line tool like curl. The client programmatically connects to the server and sends requests for tools, resources and more, receiving responses in return.","source":"@site/docs/mcp-concepts/01-consuming-server/03-client.md","sourceDirName":"mcp-concepts/01-consuming-server","slug":"/mcp-concepts/consuming-server/client","permalink":"/mcp-workshop/docs/mcp-concepts/consuming-server/client","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/mcp-concepts/01-consuming-server/03-client.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Activity: Consume server with Visual Studio Code","permalink":"/mcp-workshop/docs/mcp-concepts/consuming-server/activity-vscode"},"next":{"title":"Activity: Creating a client","permalink":"/mcp-workshop/docs/mcp-concepts/consuming-server/activity-client"}}');var s=r(4848),o=r(8453);const c={sidebar_position:3},i="Consuming a server with an MCP client",a={},l=[];function p(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"consuming-a-server-with-an-mcp-client",children:"Consuming a server with an MCP client"})}),"\n",(0,s.jsxs)(n.p,{children:["Another way to connect and consume an MCP server is by using a client. This is similar to how you would connect to a server using a web browser or a command line tool like ",(0,s.jsx)(n.code,{children:"curl"}),". The client programmatically connects to the server and sends requests for tools, resources and more, receiving responses in return."]}),"\n",(0,s.jsx)(n.p,{children:"Here's what a simple client might look like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Client } from "@modelcontextprotocol/sdk/client/index.js";\r\nimport { StdioClientTransport } from "@modelcontextprotocol/sdk/client/stdio.js";\r\n\r\nconst transport = new StdioClientTransport({\r\n  command: "node",\r\n  args: ["server.js"]\r\n});\r\n\r\nconst client = new Client(\r\n  {\r\n    name: "example-client",\r\n    version: "1.0.0"\r\n  }\r\n);\r\n\r\nawait client.connect(transport);\r\n\r\n// List prompts\r\nconst prompts = await client.listPrompts();\r\n\r\n// Get a prompt\r\nconst prompt = await client.getPrompt({\r\n  name: "example-prompt",\r\n  arguments: {\r\n    arg1: "value"\r\n  }\r\n});\r\n\r\n// List resources\r\nconst resources = await client.listResources();\r\n\r\n// Read a resource\r\nconst resource = await client.readResource({\r\n  uri: "file:///example.txt"\r\n});\r\n\r\n// Call a tool\r\nconst result = await client.callTool({\r\n  name: "example-tool",\r\n  arguments: {\r\n    arg1: "value"\r\n  }\r\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In the preceding code, the client connects to the server using the ",(0,s.jsx)(n.code,{children:"StdioClientTransport"})," transport, which allows it to communicate with the server via standard input and output. The client can then list prompts, resources, and tools, as well as read resources and call tools."]}),"\n",(0,s.jsx)(n.p,{children:"Let's learn to build this client step by step in our next activity."})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>i});var t=r(6540);const s={},o=t.createContext(s);function c(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);