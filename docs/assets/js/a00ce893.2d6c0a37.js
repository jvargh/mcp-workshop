"use strict";(self.webpackChunkmcp_workshop=self.webpackChunkmcp_workshop||[]).push([[7560],{2370:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"mcp-concepts/first-server/activity-add-api","title":"Activity: Add API to server","description":"A tool like add is interesting to see how things work, but the real value comes from seeing how to use it in a real application. In this activity, you will add an API to the server you created in the previous activity.","source":"@site/docs/mcp-concepts/00-first-server/activity-add-api.md","sourceDirName":"mcp-concepts/00-first-server","slug":"/mcp-concepts/first-server/activity-add-api","permalink":"/mcp-workshop/docs/mcp-concepts/first-server/activity-add-api","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/mcp-concepts/00-first-server/activity-add-api.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Activity: Create a first MCP server","permalink":"/mcp-workshop/docs/mcp-concepts/first-server/activity-first-server"},"next":{"title":"Consuming a server","permalink":"/mcp-workshop/docs/category/consuming-a-server"}}');var o=n(4848),s=n(8453);const a={sidebar_position:3},i="Activity: Add API to server",c={},d=[{value:"-1- Adding a tool calling an API",id:"-1--adding-a-tool-calling-an-api",level:2},{value:"-2- Adding a tool that takes input",id:"-2--adding-a-tool-that-takes-input",level:2},{value:"-3- Testing the server",id:"-3--testing-the-server",level:2}];function l(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"activity-add-api-to-server",children:"Activity: Add API to server"})}),"\n",(0,o.jsxs)(t.p,{children:["A tool like ",(0,o.jsx)(t.code,{children:"add"})," is interesting to see how things work, but the real value comes from seeing how to use it in a real application. In this activity, you will add an API to the server you created in the previous activity."]}),"\n",(0,o.jsxs)(t.p,{children:["So far, you've seen how we added a simple tool like ",(0,o.jsx)(t.code,{children:"add"})," to the server. But what if we want to call a Web API? In this activity, you will add an API to the server you created in the previous activity."]}),"\n",(0,o.jsx)(t.h2,{id:"-1--adding-a-tool-calling-an-api",children:"-1- Adding a tool calling an API"}),"\n",(0,o.jsxs)(t.p,{children:["Let's create a new file called ",(0,o.jsx)(t.code,{children:"server-api.ts"})," with the following content:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:'\r\nserver.tool("random-joke","A joke returned by the chuck norris api",{},\r\n    async () => {\r\n      const response = await fetch("https://api.chucknorris.io/jokes/random");\r\n      const data = await response.json();\r\n\r\n      return {\r\n        content: [\r\n          {\r\n            type: "text",\r\n            text: data.value\r\n          }\r\n        ]\r\n      };\r\n    }\r\n)\n'})}),"\n",(0,o.jsx)(t.p,{children:"In the preceding code:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["The tool ",(0,o.jsx)(t.code,{children:"random-joke"}),' is created with a description saying "A joke returned by the chuck norris api". The input schema is empty, meaning it doesn\'t take any input, you can also omit this input parameter but I wanted to show you where the input schema goes.']}),"\n",(0,o.jsxs)(t.li,{children:["Then, we call the ",(0,o.jsx)(t.code,{children:"fetch"})," function to call the API and get a random joke. The response is then parsed as JSON and returned as a text message."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"-2--adding-a-tool-that-takes-input",children:"-2- Adding a tool that takes input"}),"\n",(0,o.jsx)(t.p,{children:"You saw how simply we can call an API, but what if we want to pass some input to the API?"}),"\n",(0,o.jsxs)(t.p,{children:["Add the following code to the ",(0,o.jsx)(t.code,{children:"server-api.ts"})," file:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:'const JokeByCategoryInputSchema = z.object({\r\n    category: z.array(z.string())\r\n}).shape;\r\n\r\nserver.tool("random-joke-by-category","A joke by category, from Chuck Norris API",\r\n    JokeByCategoryInputSchema,\r\n    async (input) => {\r\n      const response = await fetch(`https://api.chucknorris.io/jokes/random?category=${input.category}`);\r\n      const data = await response.json();\r\n\r\n      if (!data.value) {\r\n        throw new Error("No joke found for the specified category.");\r\n      }\r\n      return {\r\n        content: [\r\n          {\r\n            type: "text",\r\n            text: data.value\r\n          }\r\n        ]\r\n      };\r\n    }\r\n)\n'})}),"\n",(0,o.jsx)(t.p,{children:"In the preceding code:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["The tool ",(0,o.jsx)(t.code,{children:"random-joke-by-category"}),' is created with a description saying "A joke by category, from Chuck Norris API". The input schema is defined using Zod, which takes a category as input.']}),"\n",(0,o.jsxs)(t.li,{children:["Finally, we call the ",(0,o.jsx)(t.code,{children:"fetch"})," function to call the API and get a random joke by category, see how we call the url ",(0,o.jsx)(t.code,{children:"https://api.chucknorris.io/jokes/random?category=${input.category}"}),"."]}),"\n"]}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsx)(t.p,{children:"It's a good idea to define an input schema like we did here in a separate variable, both to make it easy to see what the input is and to reuse it in multiple places."})}),"\n",(0,o.jsx)(t.p,{children:"The full code for the server should look like this:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:'import { McpServer, ResourceTemplate } from "@modelcontextprotocol/sdk/server/mcp.js";\r\nimport { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";\r\nimport { z } from "zod";\r\n\r\n// Create an MCP server\r\nconst server = new McpServer({\r\n  name: "Chuck",\r\n  version: "1.0.0"\r\n});\r\n\r\n// Add tool for getting a chuck norris joke\r\n\r\nserver.tool("random-joke","A joke returned by the chuck norris api",{},\r\n    async () => {\r\n      const response = await fetch("https://api.chucknorris.io/jokes/random");\r\n      const data = await response.json();\r\n\r\n      return {\r\n        content: [\r\n          {\r\n            type: "text",\r\n            text: data.value\r\n          }\r\n        ]\r\n      };\r\n    }\r\n)\r\n\r\nconst JokeByCategoryInputSchema = z.object({\r\n    category: z.array(z.string())\r\n}).shape;\r\n\r\nserver.tool("random-joke-by-category","A joke by category, from Chuck Norris API",\r\n    JokeByCategoryInputSchema,\r\n    async (input) => {\r\n      const response = await fetch(`https://api.chucknorris.io/jokes/random?category=${input.category}`);\r\n      const data = await response.json();\r\n\r\n      if (!data.value) {\r\n        throw new Error("No joke found for the specified category.");\r\n      }\r\n      return {\r\n        content: [\r\n          {\r\n            type: "text",\r\n            text: data.value\r\n          }\r\n        ]\r\n      };\r\n    }\r\n)\r\n\r\n\r\n// Start receiving messages on stdin and sending messages on stdout\r\nconst transport = new StdioServerTransport();\r\nawait server.connect(transport);\r\nconsole.log("Server started and listening for messages...");\n'})}),"\n",(0,o.jsx)(t.h2,{id:"-3--testing-the-server",children:"-3- Testing the server"}),"\n",(0,o.jsx)(t.p,{children:"Get in the habit of testing the server after each change. You can do this in several ways:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Calling the inspector tool ",(0,o.jsx)(t.code,{children:"npx @modelcontextprotocol/inspector node build/index.js"}),"."]}),"\n",(0,o.jsx)(t.li,{children:"You can also use a tool like curl or Postman to call the API directly. For example, you can call the API using curl like this:"}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var r=n(6540);const o={},s=r.createContext(o);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);