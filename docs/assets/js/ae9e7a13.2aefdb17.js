"use strict";(self.webpackChunkmcp_workshop=self.webpackChunkmcp_workshop||[]).push([[1707],{765:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/running-tool-acd27619c31555b09a7b76993cd52cf0.png"},2124:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/tools-listed-630aa49c9d7e4347108419fb83c409f6.png"},3876:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/connected-7c3570d5d0a8659e27740d2950031cb3.png"},6567:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/connect-7703c67645f368d51c7b24a5d635d6a0.png"},8155:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"mcp-concepts/first-server","title":"A first MCP server","description":"What a server can do","source":"@site/docs/mcp-concepts/first-server.md","sourceDirName":"mcp-concepts","slug":"/mcp-concepts/first-server","permalink":"/docs/mcp-concepts/first-server","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/mcp-concepts/first-server.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"MCP, what is it and why use it?","permalink":"/docs/mcp-concepts/intro"},"next":{"title":"Creating a client","permalink":"/docs/mcp-concepts/client"}}');var t=r(4848),o=r(8453);const i={sidebar_position:2},c="A first MCP server",d={},l=[{value:"What a server can do",id:"what-a-server-can-do",level:2},{value:"Creating a simple server",id:"creating-a-simple-server",level:2},{value:"-2- Testing our server",id:"-2--testing-our-server",level:2}];function a(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"a-first-mcp-server",children:"A first MCP server"})}),"\n",(0,t.jsx)(n.h2,{id:"what-a-server-can-do",children:"What a server can do"}),"\n",(0,t.jsx)(n.p,{children:"An MCP Server is a program that exposes specific capabilities through the MCP protocol. It can be a simple script or a complex application, depending on the use case. The server can interact with local data sources, remote services, and other tools to provide context to LLMs."}),"\n",(0,t.jsx)(n.p,{children:"For example, an MCP server can:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Access local files and databases"}),"\n",(0,t.jsx)(n.li,{children:"Connect to remote APIs"}),"\n",(0,t.jsx)(n.li,{children:"Perform computations"}),"\n",(0,t.jsx)(n.li,{children:"Integrate with other tools and services"}),"\n",(0,t.jsx)(n.li,{children:"Provide a user interface for interaction"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"creating-a-simple-server",children:"Creating a simple server"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["[!NOTE]\r\nMake sure you have installed Node.js before running the code below. You can check if you have it installed by running ",(0,t.jsx)(n.code,{children:"node -v"})," in your terminal."]}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Install dependencies:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install @modelcontextprotocol/sdk zod\r\nnpm install -D @types/node typescript\n"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Create a ",(0,t.jsx)(n.code,{children:"src"})," folder"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"mkdir src\n"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Create a file named ",(0,t.jsx)(n.code,{children:"index.ts"})," in ",(0,t.jsx)(n.code,{children:"src"})," folder."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Scaffold a new Node.js project by running the following command in the root folder:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm init -y\n"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Update the ",(0,t.jsx)(n.code,{children:"package.json"})," to include the following:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n   "type": "module",\r\n   "bin": {\r\n     "weather": "./build/index.js"\r\n   },\r\n   "scripts": {\r\n     "build": "tsc && chmod 755 build/index.js"\r\n   },\r\n   "files": [\r\n     "build"\r\n   ],\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["For Windows, change ",(0,t.jsx)(n.code,{children:"build"})," to:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'"build": "tsc && node ./build/index.js"\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Create ",(0,t.jsx)(n.code,{children:"tsconfig.json"})," in the root folder with the following content:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "compilerOptions": {\r\n    "target": "ES2022",\r\n    "module": "Node16",\r\n    "moduleResolution": "Node16",\r\n    "outDir": "./build",\r\n    "rootDir": "./src",\r\n    "strict": true,\r\n    "esModuleInterop": true,\r\n    "skipLibCheck": true,\r\n    "forceConsistentCasingInFileNames": true\r\n  },\r\n  "include": ["src/**/*"],\r\n  "exclude": ["node_modules"]\r\n}\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Let's start by adding code to ",(0,t.jsx)(n.code,{children:"index.ts"})," to create a simple MCP server:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { McpServer, ResourceTemplate } from "@modelcontextprotocol/sdk/server/mcp.js";\r\nimport { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";\r\nimport { z } from "zod";\r\n \r\n// Create an MCP server\r\nconst server = new McpServer({\r\n  name: "Demo",\r\n  version: "1.0.0"\r\n});\n'})}),"\n",(0,t.jsx)(n.p,{children:"Next, let's add tools to the server."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Add a tool by adding the following code to ",(0,t.jsx)(n.code,{children:"index.ts"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'server.tool("add",\r\n   { a: z.number(), b: z.number() },\r\n   async ({ a, b }) => ({\r\n     content: [{ type: "text", text: String(a + b) }]\r\n   })\r\n );\n'})}),"\n",(0,t.jsxs)(n.p,{children:['The code above adds a tool called "add" with input parameters ',(0,t.jsx)(n.code,{children:"a"})," and ",(0,t.jsx)(n.code,{children:"b"}),", both of type ",(0,t.jsx)(n.code,{children:"number"}),". The tool returns the sum of ",(0,t.jsx)(n.code,{children:"a"})," and ",(0,t.jsx)(n.code,{children:"b"})," as a text message. We will later show how you can call this tool from a client."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Add a resource by adding the following code to ",(0,t.jsx)(n.code,{children:"index.ts"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'server.resource(\r\n   "greeting",\r\n   new ResourceTemplate("greeting://{name}", { list: undefined }),\r\n   async (uri, { name }) => ({\r\n     contents: [{\r\n       uri: uri.href,\r\n       text: `Hello, ${name}!`\r\n     }]\r\n   })\r\n );\n'})}),"\n",(0,t.jsxs)(n.p,{children:['The preceding code adds a resource called "greeting" with a URI template ',(0,t.jsx)(n.code,{children:"greeting://{name}"}),". The idea is that if you invoke this resource with a name, e.g ",(0,t.jsx)(n.code,{children:"greeting://John"}),', it will return a greeting message "Hello, John!".']}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Lastly, let's add code to start the server and listen for incoming messages. Add the following code to ",(0,t.jsx)(n.code,{children:"index.ts"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Start receiving messages on stdin and sending messages on stdout\r\nconst transport = new StdioServerTransport();\r\nawait server.connect(transport);\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Here's the full code for reference:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { McpServer, ResourceTemplate } from "@modelcontextprotocol/sdk/server/mcp.js";\r\nimport { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";\r\nimport { z } from "zod";\r\n\r\n// Create an MCP server\r\nconst server = new McpServer({\r\n  name: "Demo",\r\n  version: "1.0.0"\r\n});\r\n\r\n// Add an addition tool\r\nserver.tool("add",\r\n  { a: z.number(), b: z.number() },\r\n  async ({ a, b }) => ({\r\n    content: [{ type: "text", text: String(a + b) }]\r\n  })\r\n);\r\n\r\n// Add a dynamic greeting resource\r\nserver.resource(\r\n  "greeting",\r\n  new ResourceTemplate("greeting://{name}", { list: undefined }),\r\n  async (uri, { name }) => ({\r\n    contents: [{\r\n      uri: uri.href,\r\n      text: `Hello, ${name}!`\r\n    }]\r\n  })\r\n);\r\n\r\n// Start receiving messages on stdin and sending messages on stdout\r\nconst transport = new StdioServerTransport();\r\nawait server.connect(transport);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"-2--testing-our-server",children:"-2- Testing our server"}),"\n",(0,t.jsx)(n.p,{children:"So far, you've created a simple MCP server and your file directory structure should look like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"src/\r\n\u251c\u2500\u2500 index.ts\r\npackage.json\r\npackage-lock.json\r\ntsconfig.json\n"})}),"\n",(0,t.jsx)(n.p,{children:'Your server has a tool "add" and a resource "greeting". The server is ready to receive messages on stdin and send messages on stdout.'}),"\n",(0,t.jsxs)(n.p,{children:["The easiest way to test your server is to use the inspector tool. It's a tool we can run via ",(0,t.jsx)(n.code,{children:"npx"}),", let's add it as a command to ",(0,t.jsx)(n.code,{children:"package.json"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "scripts": {\r\n    "build": "tsc && chmod 755 build/index.js",\r\n    "inspector": "npx @modelcontextprotocol/inspector node build/index.js"\r\n  }\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Providing you've run ",(0,t.jsx)(n.code,{children:"npm run build"})," at least once, you can now run the inspector with:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm run inspector\n"})}),"\n",(0,t.jsx)(n.p,{children:"You should see a window like this:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Connect",src:r(6567).A+"",width:"2323",height:"1386"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'Select to "Connect" and you should see the window below:'}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Connect",src:r(3876).A+"",width:"2591",height:"1467"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:'Select "List tools", to see what tools are available:'}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Connect",src:r(2124).A+"",width:"1933",height:"1504"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:'Select "add" and a dialog on your right will ask you to fill in the parameters:'}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Connect",src:r(765).A+"",width:"3206",height:"1274"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["You should see the result of the tool in the inspector, see ",(0,t.jsx)(n.strong,{children:"16"})," in the bottom result:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Connect",src:r(9631).A+"",width:"3193",height:"1295"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Congrats, you've managed to create a simple MCP server and run the inspector tool to test it!"}),"\n",(0,t.jsx)(n.p,{children:"You're ready for your next challenge, creating a client that can call the server and use the tools and resources you've created."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var s=r(6540);const t={},o=s.createContext(t);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(o.Provider,{value:n},e.children)}},9631:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/ran-tool-271ecd5f84a457462e59789b579ee9d4.png"}}]);