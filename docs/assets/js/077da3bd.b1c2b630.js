"use strict";(self.webpackChunkmcp_workshop=self.webpackChunkmcp_workshop||[]).push([[5891],{5537:(e,t,s)=>{s.d(t,{A:()=>j});var r=s(6540),n=s(4164),a=s(5627),o=s(6347),i=s(372),c=s(604),l=s(1861),u=s(8749);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:s}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:s,attributes:r,default:n}}=e;return{value:t,label:s,attributes:r,default:n}}))}(s);return function(e){const t=(0,l.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,s])}function h(e){let{value:t,tabValues:s}=e;return s.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:s}=e;const n=(0,o.W6)(),a=function(e){let{queryString:t=!1,groupId:s}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:t,groupId:s});return[(0,c.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(n.location.search);t.set(a,e),n.replace({...n.location,search:t.toString()})}),[a,n])]}function v(e){const{defaultValue:t,queryString:s=!1,groupId:n}=e,a=p(e),[o,c]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${s.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=s.find((e=>e.default))??s[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:a}))),[l,d]=m({queryString:s,groupId:n}),[v,f]=function(e){let{groupId:t}=e;const s=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,a]=(0,u.Dv)(s);return[n,(0,r.useCallback)((e=>{s&&a.set(e)}),[s,a])]}({groupId:n}),b=(()=>{const e=l??v;return h({value:e,tabValues:a})?e:null})();(0,i.A)((()=>{b&&c(b)}),[b]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);c(e),d(e),f(e)}),[d,f,a]),tabValues:a}}var f=s(9136);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=s(4848);function S(e){let{className:t,block:s,selectedValue:r,selectValue:o,tabValues:i}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,a.a_)(),u=e=>{const t=e.currentTarget,s=c.indexOf(t),n=i[s].value;n!==r&&(l(t),o(n))},d=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const s=c.indexOf(e.currentTarget)+1;t=c[s]??c[0];break}case"ArrowLeft":{const s=c.indexOf(e.currentTarget)-1;t=c[s]??c[c.length-1];break}}t?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,n.A)("tabs",{"tabs--block":s},t),children:i.map((e=>{let{value:t,label:s,attributes:a}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>{c.push(e)},onKeyDown:d,onClick:u,...a,className:(0,n.A)("tabs__item",b.tabItem,a?.className,{"tabs__item--active":r===t}),children:s??t},t)}))})}function x(e){let{lazy:t,children:s,selectedValue:a}=e;const o=(Array.isArray(s)?s:[s]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:(0,n.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a})))})}function w(e){const t=v(e);return(0,g.jsxs)("div",{className:(0,n.A)("tabs-container",b.tabList),children:[(0,g.jsx)(S,{...t,...e}),(0,g.jsx)(x,{...t,...e})]})}function j(e){const t=(0,f.A)();return(0,g.jsx)(w,{...e,children:d(e.children)},String(t))}},5670:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"mcp-concepts/sse-server/sse","title":"Servers with SSE","description":"The stdio transport, that you\'ve been using so far, enables communication through standard input and output streams. This is particularly useful for local integrations and command-line tools.","source":"@site/docs/mcp-concepts/02-sse-server/sse.md","sourceDirName":"mcp-concepts/02-sse-server","slug":"/mcp-concepts/sse-server/sse","permalink":"/mcp-workshop/docs/mcp-concepts/sse-server/sse","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/mcp-concepts/02-sse-server/sse.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"SSE Servers","permalink":"/mcp-workshop/docs/category/sse-servers"},"next":{"title":"Activity: Create an SSE server","permalink":"/mcp-workshop/docs/mcp-concepts/sse-server/activity-see"}}');var n=s(4848),a=s(8453),o=s(5537),i=s(9329);const c={sidebar_position:1},l="Servers with SSE",u={},d=[];function p(e){const t={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"servers-with-sse",children:"Servers with SSE"})}),"\n",(0,n.jsx)(t.p,{children:"The stdio transport, that you've been using so far, enables communication through standard input and output streams. This is particularly useful for local integrations and command-line tools."}),"\n",(0,n.jsxs)(t.p,{children:["Now, we will cover SSE ",(0,n.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events",children:"Server-Sent Events (SSE)"})," transport. SSE is a standard for server-to-client streaming, allowing servers to push real-time updates to clients over HTTP. This is particularly useful for applications that require live updates, such as chat applications, notifications, or real-time data feeds. Also, your server can be used by multiple clients at the same time as it lives on a server that can be run somewhere in the cloud for example."]}),"\n",(0,n.jsx)(t.p,{children:"Here's what such a server can look like:"}),"\n",(0,n.jsxs)(o.A,{children:[(0,n.jsxs)(i.A,{value:"typescript",label:"TypeScript",children:[(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:'import express, { Request, Response } from "express";\nimport { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";\nimport { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";\n\nconst server = new McpServer({\n  name: "example-server",\n  version: "1.0.0"\n});\n\n// ... set up server resources, tools, and prompts ...\n\nconst app = express();\n\n// to support multiple simultaneous connections we have a lookup object from\n// sessionId to transport\nconst transports: {[sessionId: string]: SSEServerTransport} = {};\n\napp.get("/sse", async (_: Request, res: Response) => {\n  const transport = new SSEServerTransport(\'/messages\', res);\n  transports[transport.sessionId] = transport;\n  res.on("close", () => {\n    delete transports[transport.sessionId];\n  });\n  await server.connect(transport);\n});\n\napp.post("/messages", async (req: Request, res: Response) => {\n  const sessionId = req.query.sessionId as string;\n  const transport = transports[sessionId];\n  if (transport) {\n    await transport.handlePostMessage(req, res);\n  } else {\n    res.status(400).send(\'No transport found for sessionId\');\n  }\n});\n\napp.listen(3001);\n'})}),(0,n.jsx)(t.p,{children:"In the preceding code we set up an Express server that listens to two endpoints:"}),(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"/sse"}),": This endpoint is used to establish a connection with the server. When a client connects to this endpoint, a new ",(0,n.jsx)(t.code,{children:"SSEServerTransport"})," instance is created and added to the ",(0,n.jsx)(t.code,{children:"transports"})," object. The server then calls ",(0,n.jsx)(t.code,{children:"server.connect(transport)"})," to start receiving messages from the client."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"/messages"}),": This endpoint is used to handle incoming messages from the client. When a message is received, the server looks up the corresponding ",(0,n.jsx)(t.code,{children:"SSEServerTransport"})," instance in the ",(0,n.jsx)(t.code,{children:"transports"})," object and calls ",(0,n.jsx)(t.code,{children:"transport.handlePostMessage(req, res)"})," to process the message."]}),"\n"]})]}),(0,n.jsxs)(i.A,{value:"python",label:"Python",default:!0,children:[(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'from starlette.applications import Starlette\nfrom starlette.routing import Mount, Host\nfrom mcp.server.fastmcp import FastMCP\n\n\nmcp = FastMCP("My App")\n\n@mcp.tool()\ndef add(a: int, b: int) -> int:\n    """Add two numbers"""\n    return a + b\n\n# Mount the SSE server to the existing ASGI server\napp = Starlette(\n    routes=[\n        Mount(\'/\', app=mcp.sse_app()),\n    ]\n)\n'})}),(0,n.jsx)(t.p,{children:"In the preceding code we set up a Starlette server that listens to two endpoints:"}),(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"/sse"}),": This endpoint is used to establish a connection with the server. When a client connects to this endpoint, a new ",(0,n.jsx)(t.code,{children:"SSEServerTransport"})," instance is created and added to the ",(0,n.jsx)(t.code,{children:"transports"})," object. The server is then ready to start receiving messages from the client."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"/messages"}),": This endpoint is used to handle incoming messages from the client. When a message is received, the server looks up the corresponding ",(0,n.jsx)(t.code,{children:"SSEServerTransport"})," instance and then proceeds to handle the message."]}),"\n"]})]})]}),"\n",(0,n.jsx)(t.p,{children:"Now that we understand what SSE is, how to create such a server, let's practice it in the next activity."})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>i});var r=s(6540);const n={},a=r.createContext(n);function o(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),r.createElement(a.Provider,{value:t},e.children)}},9329:(e,t,s)=>{s.d(t,{A:()=>o});s(6540);var r=s(4164);const n={tabItem:"tabItem_Ymn6"};var a=s(4848);function o(e){let{children:t,hidden:s,className:o}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(n.tabItem,o),hidden:s,children:t})}}}]);