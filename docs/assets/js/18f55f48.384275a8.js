"use strict";(self.webpackChunkmcp_workshop=self.webpackChunkmcp_workshop||[]).push([[6326],{4826:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"mcp-concepts/consuming-server/activity-client","title":"Activity: Creating a client","description":"To create a client, we\'ll use a similar set up as with the server. At high level, here\'s what we need to do:","source":"@site/docs/mcp-concepts/01-consuming-server/04-activity-client.md","sourceDirName":"mcp-concepts/01-consuming-server","slug":"/mcp-concepts/consuming-server/activity-client","permalink":"/mcp-workshop/docs/mcp-concepts/consuming-server/activity-client","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/mcp-concepts/01-consuming-server/04-activity-client.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Consuming a server with an MCP client","permalink":"/mcp-workshop/docs/mcp-concepts/consuming-server/client"},"next":{"title":"LLM Client","permalink":"/mcp-workshop/docs/mcp-concepts/consuming-server/llm-client"}}');var s=t(4848),o=t(8453);const i={sidebar_position:4},l="Activity: Creating a client",c={},d=[{value:"-1- Create a new Node.js project",id:"-1--create-a-new-nodejs-project",level:2},{value:"-2- Install the necessary dependencies",id:"-2--install-the-necessary-dependencies",level:3},{value:"-3- Write the client code",id:"-3--write-the-client-code",level:2},{value:"List tools and call the <code>add</code> tool",id:"list-tools-and-call-the-add-tool",level:3},{value:"-4- Run the client",id:"-4--run-the-client",level:2},{value:"Summary",id:"summary",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"activity-creating-a-client",children:"Activity: Creating a client"})}),"\n",(0,s.jsx)(n.p,{children:"To create a client, we'll use a similar set up as with the server. At high level, here's what we need to do:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Create a new Node.js project in the ",(0,s.jsx)(n.code,{children:"client"})," folder."]}),"\n",(0,s.jsx)(n.li,{children:"Install the necessary dependencies."}),"\n",(0,s.jsxs)(n.li,{children:["Create a ",(0,s.jsx)(n.code,{children:"src"})," folder and add an ",(0,s.jsx)(n.code,{children:"index.ts"})," file."]}),"\n",(0,s.jsxs)(n.li,{children:["Write the client code to connect to the server and call the ",(0,s.jsx)(n.code,{children:"add"})," tool."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-1--create-a-new-nodejs-project",children:"-1- Create a new Node.js project"}),"\n",(0,s.jsx)(n.p,{children:"This is straightforward. We will create a new Node.js project and install the necessary dependencies. The project structure will look like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"|- client\r\n    |- src\r\n    |   |- index.ts\r\n    |- package.json\r\n    |- tsconfig.json\n"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.code,{children:"client"})," folder in the root directory of your project."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir client\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Initialize a new Node.js project in the ",(0,s.jsx)(n.code,{children:"client"})," folder:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd client\r\nnpm init -y\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Update the ",(0,s.jsx)(n.code,{children:"package.json"})," file to include the following:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "name": "client",\r\n  "version": "1.0.0",\r\n  "main": "index.js",\r\n  "scripts": {\r\n    "test": "echo \\"Error: no test specified\\" && exit 1",\r\n    "build": "tsc && node ./build/index.js"\r\n  },\r\n  "keywords": [],\r\n  "author": "",\r\n  "license": "ISC",\r\n  "dependencies": {\r\n    "@modelcontextprotocol/sdk": "^1.8.0"\r\n  },\r\n  "devDependencies": {\r\n    "@types/node": "^22.13.17",\r\n    "typescript": "^5.8.2"\r\n  },\r\n  "description": ""\r\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.code,{children:"tsconfig.json"})," file in the ",(0,s.jsx)(n.code,{children:"client"})," folder with the following content:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n "compilerOptions": {\r\n   "target": "ES2022",\r\n   "module": "Node16",\r\n   "moduleResolution": "Node16",\r\n   "outDir": "./build",\r\n   "rootDir": "./src",\r\n   "strict": true,\r\n   "esModuleInterop": true,\r\n   "skipLibCheck": true,\r\n   "forceConsistentCasingInFileNames": true\r\n },\r\n "include": ["src/**/*"],\r\n "exclude": ["node_modules"]\r\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-2--install-the-necessary-dependencies",children:"-2- Install the necessary dependencies"}),"\n",(0,s.jsxs)(n.p,{children:["We need to install the necessary dependencies for the client. The main dependency is the ",(0,s.jsx)(n.code,{children:"@modelcontextprotocol/sdk"})," package, which provides the client SDK for interacting with the server. Also, we need ",(0,s.jsx)(n.code,{children:"zod"})," for validation."]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Install the necessary dependencies:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install @modelcontextprotocol/sdk zod\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.code,{children:"src"})," folder in the ",(0,s.jsx)(n.code,{children:"client"})," directory:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir src\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Create a file named ",(0,s.jsx)(n.code,{children:"index.ts"})," in the ",(0,s.jsx)(n.code,{children:"src"})," folder:"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-3--write-the-client-code",children:"-3- Write the client code"}),"\n",(0,s.jsxs)(n.p,{children:["Now that we have the project set up, let's write the client code to connect to the server and call the ",(0,s.jsx)(n.code,{children:"add"})," tool."]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Add the following code to ",(0,s.jsx)(n.code,{children:"index.ts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:' import { Client } from "@modelcontextprotocol/sdk/client/index.js";\r\n import { StdioClientTransport } from "@modelcontextprotocol/sdk/client/stdio.js";\r\n \r\n async function main() {\r\n\r\n     const transport = new StdioClientTransport({\r\n         command: "node",\r\n         args: ["../build/index.js"]\r\n     });\r\n \r\n     const client = new Client(\r\n     {\r\n         name: "example-client",\r\n         version: "1.0.0"\r\n     },\r\n     {\r\n         capabilities: {\r\n         prompts: {},\r\n         resources: {},\r\n         tools: {}\r\n         }\r\n     }\r\n    );\r\n \r\n    await client.connect(transport);\r\n\r\nmain().catch((error) => {\r\n  console.error("Fatal error: ", error);\r\n  process.exit(1);\r\n});\n'})}),"\n",(0,s.jsx)(n.p,{children:"In the preceding code:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"Client"})," class is imported from the ",(0,s.jsx)(n.code,{children:"@modelcontextprotocol/sdk/client/index.js"})," module."]}),"\n",(0,s.jsxs)(n.li,{children:["An instance of ",(0,s.jsx)(n.code,{children:"StdioClientTransport"})," is created, which will be used to communicate with the server."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"Client"})," instance is created with a name and version, and an empty capabilities object. We will add prompts, resources, and tools to the capabilities object as needed."]}),"\n",(0,s.jsxs)(n.li,{children:["A connection to the server is established using the ",(0,s.jsx)(n.code,{children:"connect"})," method of the ",(0,s.jsx)(n.code,{children:"Client"})," instance, passing in the transport instance."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"At this point, we're not doing anything with the client yet. To interact with the server, we need to implement the logic for sending requests for prompts, resources, and tools. This will be done in the next steps."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"list-tools-and-call-the-add-tool",children:["List tools and call the ",(0,s.jsx)(n.code,{children:"add"})," tool"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Add the following code to the ",(0,s.jsx)(n.code,{children:"main"})," function to query the server for its tools:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'console.log("TOOLS");\r\nconst tools = await client.listTools();\r\ntools.tools.forEach((tool) => {\r\n     console.log("Tool: ", tool.name);\r\n});\n'})}),"\n",(0,s.jsx)(n.p,{children:"In the preceding code:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"listTools"})," method of the ",(0,s.jsx)(n.code,{children:"Client"})," instance is called to retrieve the list of available tools from the server."]}),"\n",(0,s.jsx)(n.li,{children:"Thereafter the tools are printed to the console."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Let's invoke the ",(0,s.jsx)(n.code,{children:"add"})," tool we created in the server. Add the following code to the ",(0,s.jsx)(n.code,{children:"main"})," function:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Call a tool\r\nconsole.log("CALL TOOL");\r\n const result = await client.callTool({\r\n     name: "add",\r\n     arguments: {\r\n         a: 2,\r\n         b: 2\r\n     }\r\n });\r\n\r\nconsole.log("\\tResult: ", result);\n'})}),"\n",(0,s.jsx)(n.p,{children:"In the preceding code:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"callTool"})," method of the ",(0,s.jsx)(n.code,{children:"Client"})," instance is called to invoke the ",(0,s.jsx)(n.code,{children:"add"})," tool on the server."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"callTool"})," takes an object with the tool name and arguments as parameters."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Your code so far should look like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Client } from "@modelcontextprotocol/sdk/client/index.js";\r\nimport { StdioClientTransport } from "@modelcontextprotocol/sdk/client/stdio.js";\r\n\r\nasync function main() {\r\n\r\n    const transport = new StdioClientTransport({\r\n        command: "node",\r\n        args: ["../build/index.js"]\r\n    });\r\n\r\n    const client = new Client(\r\n    {\r\n        name: "example-client",\r\n        version: "1.0.0"\r\n    },\r\n    {\r\n        capabilities: {\r\n        prompts: {},\r\n        resources: {},\r\n        tools: {}\r\n        }\r\n    }\r\n    );\r\n\r\n    await client.connect(transport);\r\n\r\n    console.log("TOOLS");\r\n    const tools = await client.listTools();\r\n    tools.tools.forEach((tool) => {\r\n        console.log("Tool: ", tool.name);\r\n    });\r\n\r\n    // Call a tool\r\n    console.log("CALL TOOL");\r\n    const result = await client.callTool({\r\n        name: "add",\r\n        arguments: {\r\n            a: 2,\r\n            b: 2\r\n        }\r\n    });\r\n\r\n    console.log("\\tResult: ", result);\r\n}\r\n\r\nmain().catch((error) => {\r\n    console.error("Fatal error: ", error);\r\n    process.exit(1);\r\n});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-4--run-the-client",children:"-4- Run the client"}),"\n",(0,s.jsx)(n.p,{children:"To run the client type the following command in the terminal (make sure you stand in the client directory):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"npm run build\n"})}),"\n",(0,s.jsx)(n.p,{children:"You should see the following output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"TOOLS\r\nTool:  add\r\nCALL TOOL\r\n    Result:  { content: [ { type: 'text', text: '4' } ] }\n"})}),"\n",(0,s.jsx)(n.p,{children:"In our next activity, let's learn how we can add a large language model (LLM) to our client. This will make it possible for the client to negotiate with the server. Why this is useflu is that you can now show an NLP, Natural Language Processing user interface to the user, and the user can interact using natural language prompts."}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsxs)(n.p,{children:["You've built a client capable of communicating with an MCP Server. The client can list tools and call the ",(0,s.jsx)(n.code,{children:"add"})," tool. Either run this client from your project or clone the repository below to see a working solution:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/softchris/tutorial-mcp.git\r\ncd tutorial-mcp\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Follow the instructions in the README file to run the server and test it using the inspector tool. You can also look at the code in ",(0,s.jsx)(n.code,{children:"client/src/index.ts"}),"  to see the client working."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(6540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);