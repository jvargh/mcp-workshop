"use strict";(self.webpackChunkmcp_workshop=self.webpackChunkmcp_workshop||[]).push([[2343],{1884:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"mcp-concepts/sse-server/activity-see","title":"Activity: Create an SSE server","description":"Let\'s create an SSE server and also let\'s ensure we can reach it via clients like the Inspector and Visual Studio Code.","source":"@site/docs/mcp-concepts/02-sse-server/activity-see.md","sourceDirName":"mcp-concepts/02-sse-server","slug":"/mcp-concepts/sse-server/activity-see","permalink":"/mcp-workshop/docs/mcp-concepts/sse-server/activity-see","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/mcp-concepts/02-sse-server/activity-see.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Servers with SSE","permalink":"/mcp-workshop/docs/mcp-concepts/sse-server/sse"},"next":{"title":"What else?","permalink":"/mcp-workshop/docs/category/what-else"}}');var r=n(4848),o=n(8453),a=n(5537),i=n(9329);const l={sidebar_position:2},c="Activity: Create an SSE server",d={},h=[{value:"-1- Create the server",id:"-1--create-the-server",level:2},{value:"-2- Test the server",id:"-2--test-the-server",level:2},{value:"-1- Test the server using the Inspector",id:"-1--test-the-server-using-the-inspector",level:3},{value:"-2- Test the server using Visual Studio Code",id:"-2--test-the-server-using-visual-studio-code",level:3},{value:"Summary",id:"summary",level:2}];function p(e){const s={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"activity-create-an-sse-server",children:"Activity: Create an SSE server"})}),"\n",(0,r.jsx)(s.p,{children:"Let's create an SSE server and also let's ensure we can reach it via clients like the Inspector and Visual Studio Code."}),"\n",(0,r.jsx)(s.h2,{id:"-1--create-the-server",children:"-1- Create the server"}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsxs)(i.A,{value:"typescript",label:"TypeScript",children:[(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["Create a file ",(0,r.jsx)(s.code,{children:"server-sse.ts"})," in your existing project and add the following code:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-typescript",children:'import express, { Request, Response } from "express";\nimport { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";\nimport { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";\n'})}),"\n",(0,r.jsx)(s.p,{children:"Note how we're now using the following imports:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"SSEServerTransport"})," from ",(0,r.jsx)(s.code,{children:"@modelcontextprotocol/sdk/server/sse.js"})," instead of ",(0,r.jsx)(s.code,{children:"StdioServerTransport"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"express"})," to create an Express server instead of using the ",(0,r.jsx)(s.code,{children:"StdioServerTransport"})," directly."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"Let's move on to create the server."}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Add the following code below the imports:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-typescript",children:'const server = new McpServer({\n  name: "example-server",\n  version: "1.0.0"\n});\n\nconst app = express();\n\nconst transports: {[sessionId: string]: SSEServerTransport} = {};\n'})}),"\n",(0,r.jsxs)(s.p,{children:["This creates a new instance of the ",(0,r.jsx)(s.code,{children:"McpServer"})," class, which is the main entry point for creating an MCP server. Additionally, we create an Express server and a lookup object for storing the transports."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Let's implement the two endpoints of the server:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-typescript",children:'app.get("/sse", async (_: Request, res: Response) => {\n  const transport = new SSEServerTransport(\'/messages\', res);\n  transports[transport.sessionId] = transport;\n  res.on("close", () => {\n    delete transports[transport.sessionId];\n  });\n  await server.connect(transport);\n});\n\napp.post("/messages", async (req: Request, res: Response) => {\n  const sessionId = req.query.sessionId as string;\n  const transport = transports[sessionId];\n  if (transport) {\n    await transport.handlePostMessage(req, res);\n  } else {\n    res.status(400).send(\'No transport found for sessionId\');\n  }\n});\n\napp.listen(3001);\n'})}),"\n",(0,r.jsx)(s.p,{children:"Great, now we have the two mandatory endpoints."}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["Finally, let's add some tools to the server. Add the following code below the ",(0,r.jsx)(s.code,{children:"transports"})," object, make sure you add it before the call to ",(0,r.jsx)(s.code,{children:"app.listen(3001)"}),":"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-typescript",children:'server.tool("random-joke", "A joke returned by the chuck norris api", {},\n  async () => {\n    const response = await fetch("https://api.chucknorris.io/jokes/random");\n    const data = await response.json();\n\n    return {\n      content: [\n        {\n          type: "text",\n          text: data.value\n        }\n      ]\n    };\n  }\n);\n'})}),"\n",(0,r.jsx)(s.p,{children:"This tool will return a random joke from the Chuck Norris API."}),"\n"]}),"\n"]}),(0,r.jsxs)(s.p,{children:["The code in ",(0,r.jsx)(s.code,{children:"server-sse.ts"})," should look like this:"]}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-typescript",children:'// server-sse.ts\nimport express, { Request, Response } from "express";\nimport { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";\nimport { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";\nimport { z } from "zod";\n\n// Create an MCP server\nconst server = new McpServer({\n  name: "example-server",\n  version: "1.0.0"\n});\n\napp = express();\n\napp.get("/sse", async (_: Request, res: Response) => {\n  const transport = new SSEServerTransport(\'/messages\', res);\n  transports[transport.sessionId] = transport;\n  res.on("close", () => {\n    delete transports[transport.sessionId];\n  });\n  await server.connect(transport);\n});\n\napp.get("/messages", async (req: Request, res: Response) => {\n  const sessionId = req.query.sessionId as string;\n  const transport = transports[sessionId];\n  if (transport) {\n    await transport.handlePostMessage(req, res);\n  } else {\n    res.status(400).send(\'No transport found for sessionId\');\n  }\n});\n\napp.tool("random-joke", "A joke returned by the chuck norris api", {},\n  async () => {\n    const response = await fetch("https://api.chucknorris.io/jokes/random");\n    const data = await response.json();\n\n    return {\n      content: [\n        {\n          type: "text",\n          text: data.value\n        }\n      ]\n    };\n  }\n);\n\napp.listen(3001);\n'})})]}),(0,r.jsxs)(i.A,{value:"python",label:"Python",default:!0,children:[(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["Add the following code to ",(0,r.jsx)(s.code,{children:"server.py"})]}),"\n"]}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'from starlette.applications import Starlette\nfrom starlette.routing import Mount, Host\nfrom mcp.server.fastmcp import FastMCP\n\n\nmcp = FastMCP("My App")\n'})}),(0,r.jsx)(s.p,{children:"Now we have imported the correct things and created a server instance."}),(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:"Let's add the tools next:"}),"\n"]}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'@mcp.tool()\ndef add(a: int, b: int) -> int:\n  """Add two numbers"""\n  return a + b\n\n# Mount the SSE server to the existing ASGI server\napp = Starlette(\n    routes=[\n        Mount(\'/\', app=mcp.sse_app()),\n    ]\n)\n'})})]})]}),"\n",(0,r.jsx)(s.h2,{id:"-2--test-the-server",children:"-2- Test the server"}),"\n",(0,r.jsx)(s.p,{children:"To test the server, we will test it in two different ways:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Using the Inspector, this is a great tool to quickly test your server and see the results in a nice UI."}),"\n",(0,r.jsx)(s.li,{children:"Using Visual Studio Code. This also provide a nice UI but as it is a code editor, it can make your code development easier depending on what features you add to your MCP server."}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"-1--test-the-server-using-the-inspector",children:"-1- Test the server using the Inspector"}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsxs)(i.A,{value:"typescript",label:"TypeScript",children:[(0,r.jsx)(s.p,{children:"Clone the following project:"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"git clone https://github.com/softchris/hello-mcp\ncd hello-mcp\n"})}),(0,r.jsx)(s.p,{children:"Then run the following command:"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"npm install\n"})}),(0,r.jsx)(s.admonition,{type:"note",children:(0,r.jsx)(s.p,{children:"For the inspector to work, you need to start up the server and the inspector separately"})}),(0,r.jsx)(s.p,{children:"First, start the server by running the following command:"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"npm run start:server\n"})}),(0,r.jsx)(s.p,{children:"Next, start the inspector by running the following command:"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"npm run inspect:server\n"})})]}),(0,r.jsxs)(i.A,{value:"python",label:"Python",default:!0,children:[(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sh",children:"uvicorn server:app --reload --port 8000\n"})}),(0,r.jsx)(s.p,{children:"This should start the server."}),(0,r.jsx)(s.p,{children:"Now start the inspector in a separate terminal:"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sh",children:"npx @modelcontextprotocol/inspector\n"})}),(0,r.jsxs)(s.p,{children:["Select SSE as transport and in the url field, specificy ",(0,r.jsx)(s.a,{href:"http://localhost:8000/sse",children:"http://localhost:8000/sse"})," and connect."]})]})]}),"\n",(0,r.jsx)(s.p,{children:"This will kick off the Inspector and connect to the server."}),"\n",(0,r.jsx)(s.p,{children:"You should see an inspector window like this:"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"SSE Inspector",src:n(2327).A+"",width:"3203",height:"1154"})}),"\n",(0,r.jsx)(s.p,{children:"Note how the following have been added:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Transport: SSE"}),"\n",(0,r.jsxs)(s.li,{children:["URL: ",(0,r.jsx)(s.a,{href:"http://localhost:4321/sse",children:"http://localhost:4321/sse"})]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:'In the screenshot, I\'ve already selected "Connect" and "Tools" and have gone on to select the "random-joke" tool and what you\'re looking at is the result of running the tool.'}),"\n",(0,r.jsx)(s.h3,{id:"-2--test-the-server-using-visual-studio-code",children:"-2- Test the server using Visual Studio Code"}),"\n",(0,r.jsx)(s.p,{children:"Now we know the server is working great using the inspector, let's test it using Visual Studio Code."}),"\n",(0,r.jsxs)(s.p,{children:["Like we did before, let's add an entry to ",(0,r.jsx)(s.code,{children:"mcp.json"})," file in the ",(0,r.jsx)(s.code,{children:".vscode"})," folder:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:' "sse-server": {\n    "type": "sse",\n    "url": "http://localhost:4321/sse",\n}\n'})}),"\n",(0,r.jsx)(s.admonition,{type:"note",children:(0,r.jsx)(s.p,{children:"Type the port here that corresponds to where your server is running."})}),"\n",(0,r.jsx)(s.p,{children:"Important to note here is:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["The type is ",(0,r.jsx)(s.code,{children:"sse"})," and not ",(0,r.jsx)(s.code,{children:"stdio"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"url"})," needs to be specified AND unlike with an stdio server, you need to start up the server before you click the play button."]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["The complete ",(0,r.jsx)(s.code,{children:"mcp.json"})," file should look like this:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n    "inputs": [],\n    "servers": {\n        "sse-server": {\n            "type": "sse",\n            "url": "http://localhost:4321/sse",\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(s.p,{children:"To test the server do the following:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Start it up."}),"\n",(0,r.jsxs)(s.li,{children:["Click the play button in the ",(0,r.jsx)(s.code,{children:".vscode/mcp.json"})," file, this should add it to its tools."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"Try typing a prompt like so in the Visual Studio Code GitHub Copilot Chat window:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-text",children:"tell me a joke\n"})}),"\n",(0,r.jsxs)(s.p,{children:["You should see a result where it's asking to run a tool like this ",(0,r.jsx)(s.code,{children:"random-joke"}),"."]}),"\n",(0,r.jsx)(s.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(s.p,{children:"You've just a simple SSE server that can be used with the Inspector and Visual Studio Code. If you host this server somewhere other people can connect to it."})]})}function u(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},2327:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/sse-inspector-e1cc8c6a8905086af402b0b7ba690f11.png"},5537:(e,s,n)=>{n.d(s,{A:()=>w});var t=n(6540),r=n(4164),o=n(5627),a=n(6347),i=n(372),l=n(604),c=n(1861),d=n(8749);function h(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:s}=e;return!!s&&"object"==typeof s&&"value"in s}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:s,children:n}=e;return(0,t.useMemo)((()=>{const e=s??function(e){return h(e).map((e=>{let{props:{value:s,label:n,attributes:t,default:r}}=e;return{value:s,label:n,attributes:t,default:r}}))}(n);return function(e){const s=(0,c.XI)(e,((e,s)=>e.value===s.value));if(s.length>0)throw new Error(`Docusaurus error: Duplicate values "${s.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[s,n])}function u(e){let{value:s,tabValues:n}=e;return n.some((e=>e.value===s))}function m(e){let{queryString:s=!1,groupId:n}=e;const r=(0,a.W6)(),o=function(e){let{queryString:s=!1,groupId:n}=e;if("string"==typeof s)return s;if(!1===s)return null;if(!0===s&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:s,groupId:n});return[(0,l.aZ)(o),(0,t.useCallback)((e=>{if(!o)return;const s=new URLSearchParams(r.location.search);s.set(o,e),r.replace({...r.location,search:s.toString()})}),[o,r])]}function v(e){const{defaultValue:s,queryString:n=!1,groupId:r}=e,o=p(e),[a,l]=(0,t.useState)((()=>function(e){let{defaultValue:s,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(s){if(!u({value:s,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${s}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return s}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:s,tabValues:o}))),[c,h]=m({queryString:n,groupId:r}),[v,x]=function(e){let{groupId:s}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(s),[r,o]=(0,d.Dv)(n);return[r,(0,t.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),j=(()=>{const e=c??v;return u({value:e,tabValues:o})?e:null})();(0,i.A)((()=>{j&&l(j)}),[j]);return{selectedValue:a,selectValue:(0,t.useCallback)((e=>{if(!u({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),x(e)}),[h,x,o]),tabValues:o}}var x=n(9136);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=n(4848);function g(e){let{className:s,block:n,selectedValue:t,selectValue:a,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),d=e=>{const s=e.currentTarget,n=l.indexOf(s),r=i[n].value;r!==t&&(c(s),a(r))},h=e=>{let s=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;s=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;s=l[n]??l[l.length-1];break}}s?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},s),children:i.map((e=>{let{value:s,label:n,attributes:o}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:t===s?0:-1,"aria-selected":t===s,ref:e=>{l.push(e)},onKeyDown:h,onClick:d,...o,className:(0,r.A)("tabs__item",j.tabItem,o?.className,{"tabs__item--active":t===s}),children:n??s},s)}))})}function y(e){let{lazy:s,children:n,selectedValue:o}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(s){const e=a.find((e=>e.props.value===o));return e?(0,t.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:a.map(((e,s)=>(0,t.cloneElement)(e,{key:s,hidden:e.props.value!==o})))})}function b(e){const s=v(e);return(0,f.jsxs)("div",{className:(0,r.A)("tabs-container",j.tabList),children:[(0,f.jsx)(g,{...s,...e}),(0,f.jsx)(y,{...s,...e})]})}function w(e){const s=(0,x.A)();return(0,f.jsx)(b,{...e,children:h(e.children)},String(s))}},8453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>i});var t=n(6540);const r={},o=t.createContext(r);function a(e){const s=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(o.Provider,{value:s},e.children)}},9329:(e,s,n)=>{n.d(s,{A:()=>a});n(6540);var t=n(4164);const r={tabItem:"tabItem_Ymn6"};var o=n(4848);function a(e){let{children:s,hidden:n,className:a}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,t.A)(r.tabItem,a),hidden:n,children:s})}}}]);