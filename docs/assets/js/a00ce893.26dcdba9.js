"use strict";(self.webpackChunkmcp_workshop=self.webpackChunkmcp_workshop||[]).push([[7560],{2370:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>c,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"mcp-concepts/first-server/activity-add-api","title":"Activity: Add API to server","description":"A tool like add is interesting to see how things work, but the real value comes from seeing how to use it in a real application. In this activity, you will add an API to the server you created in the previous activity.","source":"@site/docs/mcp-concepts/00-first-server/activity-add-api.md","sourceDirName":"mcp-concepts/00-first-server","slug":"/mcp-concepts/first-server/activity-add-api","permalink":"/mcp-workshop/docs/mcp-concepts/first-server/activity-add-api","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/mcp-concepts/00-first-server/activity-add-api.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Activity: Create a first MCP server","permalink":"/mcp-workshop/docs/mcp-concepts/first-server/activity-first-server"},"next":{"title":"Consuming a server","permalink":"/mcp-workshop/docs/category/consuming-a-server"}}');var a=n(4848),o=n(8453),s=n(5537),i=n(9329);const c={sidebar_position:3},l="Activity: Add API to server",d={},u=[{value:"-1- Adding a tool calling an API",id:"-1--adding-a-tool-calling-an-api",level:2},{value:"-2- Adding a tool that takes input",id:"-2--adding-a-tool-that-takes-input",level:2},{value:"-3- Testing the server",id:"-3--testing-the-server",level:2},{value:"-4- Summary",id:"-4--summary",level:2}];function h(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"activity-add-api-to-server",children:"Activity: Add API to server"})}),"\n",(0,a.jsxs)(t.p,{children:["A tool like ",(0,a.jsx)(t.code,{children:"add"})," is interesting to see how things work, but the real value comes from seeing how to use it in a real application. In this activity, you will add an API to the server you created in the previous activity."]}),"\n",(0,a.jsxs)(t.p,{children:["So far, you've seen how we added a simple tool like ",(0,a.jsx)(t.code,{children:"add"})," to the server. But what if we want to call a Web API? In this activity, you will add an API to the server you created in the previous activity."]}),"\n",(0,a.jsx)(t.h2,{id:"-1--adding-a-tool-calling-an-api",children:"-1- Adding a tool calling an API"}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsxs)(i.A,{value:"typescript",label:"TypeScript",children:[(0,a.jsxs)(t.p,{children:["Let's create a new file called ",(0,a.jsx)(t.code,{children:"server-api.ts"})," with the following content:"]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'\nserver.tool("random-joke","A joke returned by the chuck norris api",{},\n    async () => {\n      const response = await fetch("https://api.chucknorris.io/jokes/random");\n      const data = await response.json();\n\n      return {\n        content: [\n          {\n            type: "text",\n            text: data.value\n          }\n        ]\n      };\n    }\n)\n'})}),(0,a.jsx)(t.p,{children:"In the preceding code:"}),(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["The tool ",(0,a.jsx)(t.code,{children:"random-joke"}),' is created with a description saying "A joke returned by the chuck norris api". The input schema is empty, meaning it doesn\'t take any input, you can also omit this input parameter but I wanted to show you where the input schema goes.']}),"\n",(0,a.jsxs)(t.li,{children:["Then, we call the ",(0,a.jsx)(t.code,{children:"fetch"})," function to call the API and get a random joke. The response is then parsed as JSON and returned as a text message."]}),"\n"]})]}),(0,a.jsxs)(i.A,{value:"python",label:"Python",default:!0,children:[(0,a.jsxs)(t.p,{children:["Let's create a file ",(0,a.jsx)(t.code,{children:"server-api.py"})]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'@mcp.tool()\nasync def joke() -> str:\n    """Get joke"""\n    res = requests.get("https://api.chucknorris.io/jokes/random")\n    json_response = res.json()\n\n    return json_response.get("value", "No joke found.")\n'})})]})]}),"\n",(0,a.jsx)(t.h2,{id:"-2--adding-a-tool-that-takes-input",children:"-2- Adding a tool that takes input"}),"\n",(0,a.jsx)(t.p,{children:"You saw how simply we can call an API, but what if we want to pass some input to the API?"}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsxs)(i.A,{value:"typescript",label:"TypeSCript",children:[(0,a.jsxs)(t.p,{children:["Add the following code to the ",(0,a.jsx)(t.code,{children:"server-api.ts"})," file:"]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'const JokeByCategoryInputSchema = z.object({\n    category: z.array(z.string())\n}).shape;\n\nserver.tool("random-joke-by-category","A joke by category, from Chuck Norris API",\n    JokeByCategoryInputSchema,\n    async (input) => {\n      const response = await fetch(`https://api.chucknorris.io/jokes/random?category=${input.category}`);\n      const data = await response.json();\n\n      if (!data.value) {\n        throw new Error("No joke found for the specified category.");\n      }\n      return {\n        content: [\n          {\n            type: "text",\n            text: data.value\n          }\n        ]\n      };\n    }\n)\n'})}),(0,a.jsx)(t.p,{children:"In the preceding code:"}),(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["The tool ",(0,a.jsx)(t.code,{children:"random-joke-by-category"}),' is created with a description saying "A joke by category, from Chuck Norris API". The input schema is defined using Zod, which takes a category as input.']}),"\n",(0,a.jsxs)(t.li,{children:["Finally, we call the ",(0,a.jsx)(t.code,{children:"fetch"})," function to call the API and get a random joke by category, see how we call the url ",(0,a.jsx)(t.code,{children:"https://api.chucknorris.io/jokes/random?category=${input.category}"}),"."]}),"\n"]}),(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"It's a good idea to define an input schema like we did here in a separate variable, both to make it easy to see what the input is and to reuse it in multiple places."})}),(0,a.jsx)(t.p,{children:"The full code for the server should look like this:"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'import { McpServer, ResourceTemplate } from "@modelcontextprotocol/sdk/server/mcp.js";\nimport { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";\nimport { z } from "zod";\n\n// Create an MCP server\nconst server = new McpServer({\n  name: "Chuck",\n  version: "1.0.0"\n});\n\n// Add tool for getting a chuck norris joke\n\nserver.tool("random-joke","A joke returned by the chuck norris api",{},\n    async () => {\n      const response = await fetch("https://api.chucknorris.io/jokes/random");\n      const data = await response.json();\n\n      return {\n        content: [\n          {\n            type: "text",\n            text: data.value\n          }\n        ]\n      };\n    }\n)\n\nconst JokeByCategoryInputSchema = z.object({\n    category: z.array(z.string())\n}).shape;\n\nserver.tool("random-joke-by-category","A joke by category, from Chuck Norris API",\n    JokeByCategoryInputSchema,\n    async (input) => {\n      const response = await fetch(`https://api.chucknorris.io/jokes/random?category=${input.category}`);\n      const data = await response.json();\n\n      if (!data.value) {\n        throw new Error("No joke found for the specified category.");\n      }\n      return {\n        content: [\n          {\n            type: "text",\n            text: data.value\n          }\n        ]\n      };\n    }\n)\n\n\n// Start receiving messages on stdin and sending messages on stdout\nconst transport = new StdioServerTransport();\nawait server.connect(transport);\nconsole.log("Server started and listening for messages...");\n'})})]}),(0,a.jsxs)(i.A,{value:"python",label:"Python",default:!0,children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'@mcp.tool()\nasync def joke_param(category: str = "sport") -> str:\n    """Get joke with parameter"""\n    \n    res = requests.get(f"https://api.chucknorris.io/jokes/random?category={category}")\n    json_response = res.json()\n\n    return json_response.get("value", "No joke found.")\n'})}),(0,a.jsxs)(t.p,{children:["Here we add a new function ",(0,a.jsx)(t.code,{children:"joke_param"})," and a parameter ",(0,a.jsx)(t.code,{children:"category"}),"."]})]})]}),"\n",(0,a.jsx)(t.h2,{id:"-3--testing-the-server",children:"-3- Testing the server"}),"\n",(0,a.jsx)(t.p,{children:"Get in the habit of testing the server after each change. You can do this in several ways:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Calling the inspector tool ",(0,a.jsx)(t.code,{children:"npx @modelcontextprotocol/inspector node build/index.js"}),"."]}),"\n",(0,a.jsx)(t.li,{children:"You can also use a tool like curl or Postman to call the API directly (if this is a server using SSE or streamable HTTP). For example, you can call the API using curl like this:"}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:'curl -X POST -H "Content-Type: application/json" -d \'{"category": ["dev"]}\' http://localhost:3000/random-joke-by-category\n'})}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsx)(i.A,{value:"typescript",label:"TypeScript",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash"})})}),(0,a.jsxs)(i.A,{value:"python",label:"Python",default:!0,children:[(0,a.jsx)(t.p,{children:"Run the first tool:"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"npx @modelcontextprotocol/inspector --cli mcp run server-api.py --method tools/call --tool-name joke\n"})}),(0,a.jsx)(t.p,{children:"Run the second tool with a param"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"npx @modelcontextprotocol/inspector --cli mcp run server-api.py --method tools/call --tool-name joke_param --tool-arg category=travel\n"})})]})]}),"\n",(0,a.jsx)(t.h2,{id:"-4--summary",children:"-4- Summary"}),"\n",(0,a.jsx)(t.p,{children:"You've learned to add an API in one of your tools. You can either add this code to your existing server, if you created from the previous activity, or you can work in that code into below GitHub repository:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"git clone https://github.com/softchris/mcp-workshop.git\ncd mcp-workshop\n"})}),"\n",(0,a.jsx)(t.p,{children:"Follow the instructions in the README file."})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},5537:(e,t,n)=>{n.d(t,{A:()=>k});var r=n(6540),a=n(4164),o=n(5627),s=n(6347),i=n(372),c=n(604),l=n(1861),d=n(8749);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}(n);return function(e){const t=(0,l.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.W6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c.aZ)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function y(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=h(e),[s,c]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[l,u]=m({queryString:n,groupId:a}),[y,v]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,d.Dv)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),g=(()=>{const e=l??y;return p({value:e,tabValues:o})?e:null})();(0,i.A)((()=>{g&&c(g)}),[g]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);c(e),u(e),v(e)}),[u,v,o]),tabValues:o}}var v=n(9136);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=n(4848);function j(e){let{className:t,block:n,selectedValue:r,selectValue:s,tabValues:i}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,o.a_)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=i[n].value;a!==r&&(l(t),s(a))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:o}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>{c.push(e)},onKeyDown:u,onClick:d,...o,className:(0,a.A)("tabs__item",g.tabItem,o?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function x(e){let{lazy:t,children:n,selectedValue:o}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===o));return e?(0,r.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==o})))})}function b(e){const t=y(e);return(0,f.jsxs)("div",{className:(0,a.A)("tabs-container",g.tabList),children:[(0,f.jsx)(j,{...t,...e}),(0,f.jsx)(x,{...t,...e})]})}function k(e){const t=(0,v.A)();return(0,f.jsx)(b,{...e,children:u(e.children)},String(t))}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var r=n(6540);const a={},o=r.createContext(a);function s(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(o.Provider,{value:t},e.children)}},9329:(e,t,n)=>{n.d(t,{A:()=>s});n(6540);var r=n(4164);const a={tabItem:"tabItem_Ymn6"};var o=n(4848);function s(e){let{children:t,hidden:n,className:s}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,s),hidden:n,children:t})}}}]);