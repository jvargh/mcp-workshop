"use strict";(self.webpackChunkmcp_workshop=self.webpackChunkmcp_workshop||[]).push([[2343],{1884:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"mcp-concepts/sse-server/activity-see","title":"Activity: Create an SSE server","description":"Let\'s create an SSE server and also let\'s ensure we can reach it via clients like the Inspector and Visual Studio Code.","source":"@site/docs/mcp-concepts/02-sse-server/activity-see.md","sourceDirName":"mcp-concepts/02-sse-server","slug":"/mcp-concepts/sse-server/activity-see","permalink":"/mcp-workshop/docs/mcp-concepts/sse-server/activity-see","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/mcp-concepts/02-sse-server/activity-see.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Servers with SSE","permalink":"/mcp-workshop/docs/mcp-concepts/sse-server/sse"},"next":{"title":"What else?","permalink":"/mcp-workshop/docs/category/what-else"}}');var t=r(4848),o=r(8453);const i={sidebar_position:2},c="Activity: Create an SSE server",a={},l=[{value:"-1- Create the server",id:"-1--create-the-server",level:2},{value:"-2- Test the server",id:"-2--test-the-server",level:2},{value:"-1- Test the server using the Inspector",id:"-1--test-the-server-using-the-inspector",level:3},{value:"-2- Test the server using Visual Studio Code",id:"-2--test-the-server-using-visual-studio-code",level:3}];function d(e){const s={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"activity-create-an-sse-server",children:"Activity: Create an SSE server"})}),"\n",(0,t.jsx)(s.p,{children:"Let's create an SSE server and also let's ensure we can reach it via clients like the Inspector and Visual Studio Code."}),"\n",(0,t.jsx)(s.h2,{id:"-1--create-the-server",children:"-1- Create the server"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["Create a file ",(0,t.jsx)(s.code,{children:"server-sse"})," in your existing project and add the following code:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:'import express, { Request, Response } from "express";\r\nimport { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";\r\nimport { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";\n'})}),"\n",(0,t.jsx)(s.p,{children:"Note how we're now using the following imports:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"SSEServerTransport"})," from ",(0,t.jsx)(s.code,{children:"@modelcontextprotocol/sdk/server/sse.js"})," instead of ",(0,t.jsx)(s.code,{children:"StdioServerTransport"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"express"})," to create an Express server instead of using the ",(0,t.jsx)(s.code,{children:"StdioServerTransport"})," directly."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Let's move on to create the server."}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Add the following code below the imports:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:'const server = new McpServer({\r\n  name: "example-server",\r\n  version: "1.0.0"\r\n});\r\n\r\nconst app = express();\r\n\r\nconst transports: {[sessionId: string]: SSEServerTransport} = {};\n'})}),"\n",(0,t.jsxs)(s.p,{children:["This creates a new instance of the ",(0,t.jsx)(s.code,{children:"McpServer"})," class, which is the main entry point for creating an MCP server. Additionally, we create an Express server and a lookup object for storing the transports."]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Let's implement the two endpoints of the server:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:'app.get("/sse", async (_: Request, res: Response) => {\r\n  const transport = new SSEServerTransport(\'/messages\', res);\r\n  transports[transport.sessionId] = transport;\r\n  res.on("close", () => {\r\n    delete transports[transport.sessionId];\r\n  });\r\n  await server.connect(transport);\r\n});\r\n\r\napp.post("/messages", async (req: Request, res: Response) => {\r\n  const sessionId = req.query.sessionId as string;\r\n  const transport = transports[sessionId];\r\n  if (transport) {\r\n    await transport.handlePostMessage(req, res);\r\n  } else {\r\n    res.status(400).send(\'No transport found for sessionId\');\r\n  }\r\n});\r\n\r\napp.listen(3001);\n'})}),"\n",(0,t.jsx)(s.p,{children:"Great, now we have the two mandatory endpoints."}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["Finally, let's add some tools to the server. Add the following code below the ",(0,t.jsx)(s.code,{children:"transports"})," object, make sure you add it before the call to ",(0,t.jsx)(s.code,{children:"app.listen(3001)"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:'server.tool("random-joke", "A joke returned by the chuck norris api", {},\r\n  async () => {\r\n    const response = await fetch("https://api.chucknorris.io/jokes/random");\r\n    const data = await response.json();\r\n\r\n    return {\r\n      content: [\r\n        {\r\n          type: "text",\r\n          text: data.value\r\n        }\r\n      ]\r\n    };\r\n  }\r\n);\n'})}),"\n",(0,t.jsx)(s.p,{children:"This tool will return a random joke from the Chuck Norris API."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["The code in ",(0,t.jsx)(s.code,{children:"server-sse.ts"})," should look like this:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:'// server-sse.ts\r\nimport express, { Request, Response } from "express";\r\nimport { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";\r\nimport { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";\r\nimport { z } from "zod";\r\n\r\n// Create an MCP server\r\nconst server = new McpServer({\r\n  name: "example-server",\r\n  version: "1.0.0"\r\n});\r\n\r\napp = express();\r\n\r\napp.get("/sse", async (_: Request, res: Response) => {\r\n  const transport = new SSEServerTransport(\'/messages\', res);\r\n  transports[transport.sessionId] = transport;\r\n  res.on("close", () => {\r\n    delete transports[transport.sessionId];\r\n  });\r\n  await server.connect(transport);\r\n});\r\n\r\napp.get("/messages", async (req: Request, res: Response) => {\r\n  const sessionId = req.query.sessionId as string;\r\n  const transport = transports[sessionId];\r\n  if (transport) {\r\n    await transport.handlePostMessage(req, res);\r\n  } else {\r\n    res.status(400).send(\'No transport found for sessionId\');\r\n  }\r\n});\r\n\r\napp.tool("random-joke", "A joke returned by the chuck norris api", {},\r\n  async () => {\r\n    const response = await fetch("https://api.chucknorris.io/jokes/random");\r\n    const data = await response.json();\r\n\r\n    return {\r\n      content: [\r\n        {\r\n          type: "text",\r\n          text: data.value\r\n        }\r\n      ]\r\n    };\r\n  }\r\n);\r\n\r\napp.listen(3001);\n'})}),"\n",(0,t.jsx)(s.h2,{id:"-2--test-the-server",children:"-2- Test the server"}),"\n",(0,t.jsx)(s.p,{children:"To test the server, we will test it in two different ways:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Using the Inspector, this is a great tool to quickly test your server and see the results in a nice UI."}),"\n",(0,t.jsx)(s.li,{children:"Using Visual Studio Code. This also provide a nice UI but as it is a code editor, it can make your code development easier depending on what features you add to your MCP server."}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"-1--test-the-server-using-the-inspector",children:"-1- Test the server using the Inspector"}),"\n",(0,t.jsx)(s.p,{children:"Clone the following project:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"git clone https://github.com/softchris/hello-mcp\r\ncd hello-mcp\n"})}),"\n",(0,t.jsx)(s.p,{children:"Then run the following command:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"npm install\n"})}),"\n",(0,t.jsx)(s.admonition,{type:"note",children:(0,t.jsx)(s.p,{children:"For the inspector to work, you need to start up the server and the inspector separately"})}),"\n",(0,t.jsx)(s.p,{children:"First, start the server by running the following command:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"npm run start:server\n"})}),"\n",(0,t.jsx)(s.p,{children:"Next, start the inspector by running the following command:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"npm run inspect:server\n"})}),"\n",(0,t.jsx)(s.p,{children:"This will kick off the Inspector and connect to the server."}),"\n",(0,t.jsx)(s.p,{children:"You should see an inspector window like this:"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"SSE Inspector",src:r(5586).A+"",width:"3203",height:"1154"})}),"\n",(0,t.jsx)(s.p,{children:"Note how the following have been added:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Transport: SSE"}),"\n",(0,t.jsxs)(s.li,{children:["URL: ",(0,t.jsx)(s.a,{href:"http://localhost:4321/sse",children:"http://localhost:4321/sse"})]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:'In the screenshot, I\'ve already selected "Connect" and "Tools" and have gone on to select the "random-joke" tool and what you\'re looking at is the result of running the tool.'}),"\n",(0,t.jsx)(s.h3,{id:"-2--test-the-server-using-visual-studio-code",children:"-2- Test the server using Visual Studio Code"}),"\n",(0,t.jsx)(s.p,{children:"Now we know the server is working great using the inspector, let's test it using Visual Studio Code."}),"\n",(0,t.jsxs)(s.p,{children:["Like we did before, let's add an entry to ",(0,t.jsx)(s.code,{children:"mcp.json"})," file in the ",(0,t.jsx)(s.code,{children:".vscode"})," folder:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:' "sse-server": {\r\n    "type": "sse",\r\n    "url": "http://localhost:4321/sse",\r\n}\n'})}),"\n",(0,t.jsx)(s.p,{children:"Important to note here is:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["The type is ",(0,t.jsx)(s.code,{children:"sse"})," and not ",(0,t.jsx)(s.code,{children:"stdio"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"url"})," needs to be specified AND unlike with an stdio server, you need to start up the server before you click the play button."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["The complete ",(0,t.jsx)(s.code,{children:"mcp.json"})," file should look like this:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\r\n    "inputs": [],\r\n    "servers": {\r\n        "sse-server": {\r\n            "type": "sse",\r\n            "url": "http://localhost:4321/sse",\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(s.p,{children:"To test the server do the following:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Start it with ",(0,t.jsx)(s.code,{children:"npm run start:server"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["Click the play button in the ",(0,t.jsx)(s.code,{children:".vscode/mcp.json"})," file."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Try typing a prompt like so in the Visual Studio Code GitHub Copilot Chat window:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-text",children:"tell me a joke\n"})}),"\n",(0,t.jsxs)(s.p,{children:["You should see a result where it's asking to run a tool like this ",(0,t.jsx)(s.code,{children:"random-joke"}),"."]})]})}function p(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},5586:(e,s,r)=>{r.d(s,{A:()=>n});const n=r.p+"assets/images/sse-inspector-e1cc8c6a8905086af402b0b7ba690f11.png"},8453:(e,s,r)=>{r.d(s,{R:()=>i,x:()=>c});var n=r(6540);const t={},o=n.createContext(t);function i(e){const s=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),n.createElement(o.Provider,{value:s},e.children)}}}]);