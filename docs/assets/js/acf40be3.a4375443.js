"use strict";(self.webpackChunkmcp_workshop=self.webpackChunkmcp_workshop||[]).push([[4755],{2532:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"mcp-concepts/first-server/activity-first-server","title":"Activity: Create a first MCP server","description":"What a server can do","source":"@site/docs/mcp-concepts/00-first-server/activity-first-server.md","sourceDirName":"mcp-concepts/00-first-server","slug":"/mcp-concepts/first-server/activity-first-server","permalink":"/mcp-workshop/docs/mcp-concepts/first-server/activity-first-server","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/mcp-concepts/00-first-server/activity-first-server.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"MCP, what is it and why use it?","permalink":"/mcp-workshop/docs/mcp-concepts/first-server/intro"},"next":{"title":"Activity: Add API to server","permalink":"/mcp-workshop/docs/mcp-concepts/first-server/activity-add-api"}}');var t=r(4848),i=r(8453),l=r(5537),o=r(9329);const a={sidebar_position:2},c="Activity: Create a first MCP server",d={},h=[{value:"What a server can do",id:"what-a-server-can-do",level:2},{value:"Creating a simple server",id:"creating-a-simple-server",level:2},{value:"-1- Install the MCP SDK",id:"-1--install-the-mcp-sdk",level:3},{value:"-2- Create a new project",id:"-2--create-a-new-project",level:3},{value:"-3- Create the server",id:"-3--create-the-server",level:3},{value:"Testing our server",id:"testing-our-server",level:2},{value:"-1- Run the inspector tool",id:"-1--run-the-inspector-tool",level:3},{value:"-2- Connect to the server",id:"-2--connect-to-the-server",level:3},{value:"-3- Run the tool",id:"-3--run-the-tool",level:3},{value:"-4- Summary",id:"-4--summary",level:2}];function u(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"activity-create-a-first-mcp-server",children:"Activity: Create a first MCP server"})}),"\n",(0,t.jsx)(n.h2,{id:"what-a-server-can-do",children:"What a server can do"}),"\n",(0,t.jsx)(n.p,{children:"An MCP Server is a program that exposes specific capabilities through the MCP protocol. It can be a simple script or a complex application, depending on the use case. The server can interact with local data sources, remote services, and other tools to provide context to LLMs."}),"\n",(0,t.jsx)(n.p,{children:"For example, an MCP server can:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Access local files and databases"}),"\n",(0,t.jsx)(n.li,{children:"Connect to remote APIs"}),"\n",(0,t.jsx)(n.li,{children:"Perform computations"}),"\n",(0,t.jsx)(n.li,{children:"Integrate with other tools and services"}),"\n",(0,t.jsx)(n.li,{children:"Provide a user interface for interaction"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"creating-a-simple-server",children:"Creating a simple server"}),"\n",(0,t.jsx)(n.p,{children:"To create a server, you need to follow these steps:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Install the MCP SDK."}),"\n",(0,t.jsx)(n.li,{children:"Create a new Node.js project and set up the project structure."}),"\n",(0,t.jsx)(n.li,{children:"Write the server code."}),"\n",(0,t.jsx)(n.li,{children:"Test the server."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"-1--install-the-mcp-sdk",children:"-1- Install the MCP SDK"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Make sure you have installed Node.js before running the code below. You can check if you have it installed by running ",(0,t.jsx)(n.code,{children:"node -v"})," in your terminal."]})}),"\n",(0,t.jsxs)(l.A,{children:[(0,t.jsx)(o.A,{value:"TypeScript",label:"TypeScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install @modelcontextprotocol/sdk zod\nnpm install -D @types/node typescript\n"})})}),(0,t.jsxs)(o.A,{value:"Python",label:"Python",default:!0,children:[(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Create a virtual environment"}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"python -m venv venv\nvenv\\Scrips\\activate\n"})}),(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Install dependencies"}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'pip install "mcp[cli]"\n'})})]})]}),"\n",(0,t.jsx)(n.h3,{id:"-2--create-a-new-project",children:"-2- Create a new project"}),"\n",(0,t.jsx)(n.p,{children:"Create the project structure by following these steps:"}),"\n",(0,t.jsxs)(l.A,{children:[(0,t.jsxs)(o.A,{value:"TypeScript",label:"TypeScript",children:[(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Create a ",(0,t.jsx)(n.code,{children:"src"})," folder"]}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"mkdir src\n"})}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Create a file named ",(0,t.jsx)(n.code,{children:"index.ts"})," in ",(0,t.jsx)(n.code,{children:"src"})," folder."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Scaffold a new Node.js project by running the following command in the root folder:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm init -y\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Update the ",(0,t.jsx)(n.code,{children:"package.json"})," to include the following:"]}),"\n"]}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "type": "module",\n    "bin": {\n      "weather": "./build/index.js"\n    },\n    "scripts": {\n      "build": "tsc && chmod 755 build/index.js"\n    },\n    "files": [\n      "build"\n    ],\n}\n'})}),(0,t.jsxs)(n.p,{children:["For Windows, change ",(0,t.jsx)(n.code,{children:"build"})," to:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'"build": "tsc && node ./build/index.js"\n'})}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Create ",(0,t.jsx)(n.code,{children:"tsconfig.json"})," in the root folder with the following content:"]}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "target": "ES2022",\n    "module": "Node16",\n    "moduleResolution": "Node16",\n    "outDir": "./build",\n    "rootDir": "./src",\n    "strict": true,\n    "esModuleInterop": true,\n    "skipLibCheck": true,\n    "forceConsistentCasingInFileNames": true\n  },\n  "include": ["src/**/*"],\n  "exclude": ["node_modules"]\n}\n'})})]}),(0,t.jsx)(o.A,{value:"Python",label:"Python",default:!0,children:(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Create a ",(0,t.jsx)(n.code,{children:"src"})," folder."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Create a file ",(0,t.jsx)(n.code,{children:"server.py"})," in it."]}),"\n"]}),"\n"]})})]}),"\n",(0,t.jsx)(n.h3,{id:"-3--create-the-server",children:"-3- Create the server"}),"\n",(0,t.jsxs)(l.A,{children:[(0,t.jsxs)(o.A,{value:"TypeScript",label:"TypeScript",children:[(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Let's start by adding code to ",(0,t.jsx)(n.code,{children:"index.ts"})," to create a simple MCP server:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { McpServer, ResourceTemplate } from "@modelcontextprotocol/sdk/server/mcp.js";\nimport { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";\nimport { z } from "zod";\n \n// Create an MCP server\nconst server = new McpServer({\n  name: "Demo",\n  version: "1.0.0"\n});\n'})}),"\n",(0,t.jsx)(n.p,{children:"Next, let's add tools to the server."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Add a tool by adding the following code to ",(0,t.jsx)(n.code,{children:"index.ts"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'server.tool("add",\n   { a: z.number(), b: z.number() },\n   async ({ a, b }) => ({\n     content: [{ type: "text", text: String(a + b) }]\n   })\n );\n'})}),"\n",(0,t.jsxs)(n.p,{children:['The code above adds a tool called "add" with input parameters ',(0,t.jsx)(n.code,{children:"a"})," and ",(0,t.jsx)(n.code,{children:"b"}),", both of type ",(0,t.jsx)(n.code,{children:"number"}),". The tool returns the sum of ",(0,t.jsx)(n.code,{children:"a"})," and ",(0,t.jsx)(n.code,{children:"b"})," as a text message. We will later show how you can call this tool from a client."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Add a resource by adding the following code to ",(0,t.jsx)(n.code,{children:"index.ts"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'server.resource(\n   "greeting",\n   new ResourceTemplate("greeting://{name}", { list: undefined }),\n   async (uri, { name }) => ({\n     contents: [{\n       uri: uri.href,\n       text: `Hello, ${name}!`\n     }]\n   })\n );\n'})}),"\n",(0,t.jsxs)(n.p,{children:['The preceding code adds a resource called "greeting" with a URI template ',(0,t.jsx)(n.code,{children:"greeting://{name}"}),". The idea is that if you invoke this resource with a name, e.g ",(0,t.jsx)(n.code,{children:"greeting://John"}),', it will return a greeting message "Hello, John!".']}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Lastly, let's add code to start the server and listen for incoming messages. Add the following code to ",(0,t.jsx)(n.code,{children:"index.ts"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Start receiving messages on stdin and sending messages on stdout\nconst transport = new StdioServerTransport();\nawait server.connect(transport);\n"})}),"\n"]}),"\n"]}),(0,t.jsx)(n.p,{children:"Here's the full code for reference:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// index.ts\nimport { McpServer, ResourceTemplate } from "@modelcontextprotocol/sdk/server/mcp.js";\nimport { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";\nimport { z } from "zod";\n\n// Create an MCP server\nconst server = new McpServer({\n  name: "Demo",\n  version: "1.0.0"\n});\n\n// Add an addition tool\nserver.tool("add",\n  { a: z.number(), b: z.number() },\n  async ({ a, b }) => ({\n    content: [{ type: "text", text: String(a + b) }]\n  })\n);\n\n// Add a dynamic greeting resource\nserver.resource(\n  "greeting",\n  new ResourceTemplate("greeting://{name}", { list: undefined }),\n  async (uri, { name }) => ({\n    contents: [{\n      uri: uri.href,\n      text: `Hello, ${name}!`\n    }]\n  })\n);\n\n// Start receiving messages on stdin and sending messages on stdout\nconst transport = new StdioServerTransport();\nawait server.connect(transport);\n'})})]}),(0,t.jsxs)(o.A,{value:"Python",label:"Python",default:!0,children:[(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Create the server by adding the below code:"}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# server.py\nfrom mcp.server.fastmcp import FastMCP\n\n# Create an MCP server\nmcp = FastMCP("Demo")\n\n'})}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Now, let's add the tools:"}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Add an addition tool\n@mcp.tool()\ndef add(a: int, b: int) -> int:\n    """Add two numbers"""\n    return a + b\n\n'})}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Finally, let's add a resource:"}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:' # Add a dynamic greeting resource\n@mcp.resource("greeting://{name}")\ndef get_greeting(name: str) -> str:\n    """Get a personalized greeting"""\n    return f"Hello, {name}!"\n\nif __name__ == "__main__":\n    mcp.run()\n'})})]})]}),"\n",(0,t.jsx)(n.h2,{id:"testing-our-server",children:"Testing our server"}),"\n",(0,t.jsx)(n.p,{children:"So far, you've created a simple MCP server and your file directory structure should look like this:"}),"\n",(0,t.jsxs)(l.A,{children:[(0,t.jsx)(o.A,{value:"typescript",label:"TypeScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"src/\n\u251c\u2500\u2500 index.ts\npackage.json\npackage-lock.json\ntsconfig.json\n"})})}),(0,t.jsx)(o.A,{value:"python",label:"Python",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"src/\n|-- server.py\n"})})})]}),"\n",(0,t.jsx)(n.p,{children:'Your server has a tool "add" and a resource "greeting". The server is ready to receive messages on stdin and send messages on stdout.'}),"\n",(0,t.jsx)(n.h3,{id:"-1--run-the-inspector-tool",children:"-1- Run the inspector tool"}),"\n",(0,t.jsxs)(n.p,{children:["The easiest way to test your server is to use the inspector tool. It's a tool we can run via ",(0,t.jsx)(n.code,{children:"npx"}),"."]}),"\n",(0,t.jsxs)(l.A,{children:[(0,t.jsxs)(o.A,{value:"TypeScript",children:[(0,t.jsxs)(n.p,{children:["Let's add it as a command to ",(0,t.jsx)(n.code,{children:"package.json"}),":"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    "build": "tsc && chmod 755 build/index.js",\n    "inspector": "npx @modelcontextprotocol/inspector node build/index.js"\n  }\n}\n'})}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Run the inspector tool by running the following command in your terminal:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm run inspector\n"})}),"\n",(0,t.jsx)(n.p,{children:"You should see a window like this:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Connect",src:r(3846).A+"",width:"2323",height:"1386"})}),"\n"]}),"\n"]})]}),(0,t.jsxs)(o.A,{value:"python",label:"Python",default:!0,children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"mcp dev server.py\n"})}),(0,t.jsx)(n.p,{children:"You should see a window like this:"}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Connect",src:r(3846).A+"",width:"2323",height:"1386"})})]})]}),"\n",(0,t.jsx)(n.h3,{id:"-2--connect-to-the-server",children:"-2- Connect to the server"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:'Select to "Connect" and you should see the window below:'}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Connect",src:r(6457).A+"",width:"2591",height:"1467"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:'Select "List tools", to see what tools are available:'}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Connect",src:r(2715).A+"",width:"1933",height:"1504"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"-3--run-the-tool",children:"-3- Run the tool"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:'Select "add" and a dialog on your right will ask you to fill in the parameters:'}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Connect",src:r(8334).A+"",width:"3206",height:"1274"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["You should see the result of the tool in the inspector, see ",(0,t.jsx)(n.strong,{children:"16"})," in the bottom result:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Connect",src:r(3408).A+"",width:"3193",height:"1295"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Congrats, you've managed to create a simple MCP server and run the inspector tool to test it!"}),"\n",(0,t.jsx)(n.p,{children:"You're ready for your next challenge, creating a client that can call the server and use the tools and resources you've created."}),"\n",(0,t.jsx)(n.h2,{id:"-4--summary",children:"-4- Summary"}),"\n",(0,t.jsx)(n.p,{children:"You've learned to build a simple MCP Server and test it using the inspector tool. To look at a working solution you can clone the below:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/softchris/mcp-workshop-mcp.git\ncd mcp-workshop\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},2715:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/tools-listed-630aa49c9d7e4347108419fb83c409f6.png"},3408:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/ran-tool-271ecd5f84a457462e59789b579ee9d4.png"},3846:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/connect-7703c67645f368d51c7b24a5d635d6a0.png"},5537:(e,n,r)=>{r.d(n,{A:()=>w});var s=r(6540),t=r(4164),i=r(5627),l=r(6347),o=r(372),a=r(604),c=r(1861),d=r(8749);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:r}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:r,attributes:s,default:t}}=e;return{value:n,label:r,attributes:s,default:t}}))}(r);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function p(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:r}=e;const t=(0,l.W6)(),i=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,a.aZ)(i),(0,s.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(t.location.search);n.set(i,e),t.replace({...t.location,search:n.toString()})}),[i,t])]}function x(e){const{defaultValue:n,queryString:r=!1,groupId:t}=e,i=u(e),[l,a]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=r.find((e=>e.default))??r[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:i}))),[c,h]=m({queryString:r,groupId:t}),[x,j]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,i]=(0,d.Dv)(r);return[t,(0,s.useCallback)((e=>{r&&i.set(e)}),[r,i])]}({groupId:t}),v=(()=>{const e=c??x;return p({value:e,tabValues:i})?e:null})();(0,o.A)((()=>{v&&a(v)}),[v]);return{selectedValue:l,selectValue:(0,s.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);a(e),h(e),j(e)}),[h,j,i]),tabValues:i}}var j=r(9136);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=r(4848);function f(e){let{className:n,block:r,selectedValue:s,selectValue:l,tabValues:o}=e;const a=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.a_)(),d=e=>{const n=e.currentTarget,r=a.indexOf(n),t=o[r].value;t!==s&&(c(n),l(t))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=a.indexOf(e.currentTarget)+1;n=a[r]??a[0];break}case"ArrowLeft":{const r=a.indexOf(e.currentTarget)-1;n=a[r]??a[a.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":r},n),children:o.map((e=>{let{value:n,label:r,attributes:i}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>{a.push(e)},onKeyDown:h,onClick:d,...i,className:(0,t.A)("tabs__item",v.tabItem,i?.className,{"tabs__item--active":s===n}),children:r??n},n)}))})}function b(e){let{lazy:n,children:r,selectedValue:i}=e;const l=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===i));return e?(0,s.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function y(e){const n=x(e);return(0,g.jsxs)("div",{className:(0,t.A)("tabs-container",v.tabList),children:[(0,g.jsx)(f,{...n,...e}),(0,g.jsx)(b,{...n,...e})]})}function w(e){const n=(0,j.A)();return(0,g.jsx)(y,{...e,children:h(e.children)},String(n))}},6457:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/connected-7c3570d5d0a8659e27740d2950031cb3.png"},8334:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/running-tool-acd27619c31555b09a7b76993cd52cf0.png"},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>o});var s=r(6540);const t={},i=s.createContext(t);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(i.Provider,{value:n},e.children)}},9329:(e,n,r)=>{r.d(n,{A:()=>l});r(6540);var s=r(4164);const t={tabItem:"tabItem_Ymn6"};var i=r(4848);function l(e){let{children:n,hidden:r,className:l}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,s.A)(t.tabItem,l),hidden:r,children:n})}}}]);